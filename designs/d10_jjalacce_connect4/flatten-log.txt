
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read_verilog -sv d10_jjalacce_connect4/src/toplevel_chip.v d10_jjalacce_connect4/src/chip.sv d10_jjalacce_connect4/src/verilogCHIP.v; synth -flatten -top toplevel_chip; setundef -undriven -zero; setundef -zero; async2sync; synth -top toplevel_chip; rename toplevel_chip d10_jjalacce_connect4; write_verilog -attr2comment d10_jjalacce_connect4/flattened.v; check; stat;' --

1. Executing Verilog-2005 frontend: d10_jjalacce_connect4/src/toplevel_chip.v
Parsing SystemVerilog input from `d10_jjalacce_connect4/src/toplevel_chip.v' to AST representation.
Generating RTLIL representation for module `\toplevel_chip'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: d10_jjalacce_connect4/src/chip.sv
Parsing SystemVerilog input from `d10_jjalacce_connect4/src/chip.sv' to AST representation.
Generating RTLIL representation for module `\my_chip'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: d10_jjalacce_connect4/src/verilogCHIP.v
Parsing SystemVerilog input from `d10_jjalacce_connect4/src/verilogCHIP.v' to AST representation.
Generating RTLIL representation for module `\Board'.
Generating RTLIL representation for module `\Ownership'.
Generating RTLIL representation for module `\currentPlayerFSM'.
Generating RTLIL representation for module `\PvE'.
Generating RTLIL representation for module `\PvEFSM'.
Generating RTLIL representation for module `\LSFR0'.
Generating RTLIL representation for module `\LSFR1'.
Generating RTLIL representation for module `\LSFR2'.
Generating RTLIL representation for module `\LSFR3'.
Generating RTLIL representation for module `\LSFR4'.
Generating RTLIL representation for module `\LSFR5'.
Generating RTLIL representation for module `\LSFR6'.
Generating RTLIL representation for module `\Token'.
Generating RTLIL representation for module `\RangeCheck'.
Generating RTLIL representation for module `\Counter'.
Generating RTLIL representation for module `\TopChip'.
Generating RTLIL representation for module `\Colors'.
Generating RTLIL representation for module `\vga'.
Successfully finished Verilog frontend.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \TopChip
Used module:             \PvE
Used module:                 \PvEFSM
Used module:                 \LSFR6
Used module:                 \LSFR5
Used module:                 \LSFR4
Used module:                 \LSFR3
Used module:                 \LSFR2
Used module:                 \LSFR1
Used module:                 \LSFR0
Used module:             \Ownership
Used module:                 \currentPlayerFSM
Used module:             \Colors
Used module:             \Token
Used module:                 \RangeCheck
Used module:             \Board
Used module:             \vga
Parameter \w = 10

4.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RangeCheck'.
Parameter \w = 10
Generating RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9

4.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\RangeCheck'.
Parameter \w = 9
Generating RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.
Parameter \w = 10
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001010'.
Parameter \w = 9
Found cached RTLIL representation for module `$paramod\RangeCheck\w=s32'00000000000000000000000000001001'.

4.1.4. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \TopChip
Used module:             \PvE
Used module:                 \PvEFSM
Used module:                 \LSFR6
Used module:                 \LSFR5
Used module:                 \LSFR4
Used module:                 \LSFR3
Used module:                 \LSFR2
Used module:                 \LSFR1
Used module:                 \LSFR0
Used module:             \Ownership
Used module:                 \currentPlayerFSM
Used module:             \Colors
Used module:             \Token
Used module:                 $paramod\RangeCheck\w=s32'00000000000000000000000000001010
Used module:                 $paramod\RangeCheck\w=s32'00000000000000000000000000001001
Used module:             \Board
Used module:             \vga

4.1.5. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \TopChip
Used module:             \PvE
Used module:                 \PvEFSM
Used module:                 \LSFR6
Used module:                 \LSFR5
Used module:                 \LSFR4
Used module:                 \LSFR3
Used module:                 \LSFR2
Used module:                 \LSFR1
Used module:                 \LSFR0
Used module:             \Ownership
Used module:                 \currentPlayerFSM
Used module:             \Colors
Used module:             \Token
Used module:                 $paramod\RangeCheck\w=s32'00000000000000000000000000001010
Used module:                 $paramod\RangeCheck\w=s32'00000000000000000000000000001001
Used module:             \Board
Used module:             \vga
Removing unused module `\Counter'.
Removing unused module `\RangeCheck'.
Removed 2 unused modules.
Warning: Resizing cell port TopChip.vga.v_idx from 9 bits to 10 bits.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560 in module vga.
Marked 4 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554 in module Colors.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1558$535 in module Colors.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1548$534 in module Colors.
Marked 3 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527 in module TopChip.
Marked 2 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525 in module TopChip.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:566$395 in module LSFR6.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:543$392 in module LSFR5.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:520$389 in module LSFR4.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:497$386 in module LSFR3.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:474$383 in module LSFR2.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:451$380 in module LSFR1.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:428$377 in module LSFR0.
Marked 4 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355 in module PvEFSM.
Marked 7 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:357$354 in module PvEFSM.
Marked 2 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352 in module PvEFSM.
Removed 1 dead cases from process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311 in module currentPlayerFSM.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311 in module currentPlayerFSM.
Removed 1 dead cases from process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309 in module currentPlayerFSM.
Marked 3 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309 in module currentPlayerFSM.
Marked 1 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:213$308 in module currentPlayerFSM.
Marked 3 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306 in module Ownership.
Marked 9 switch rules as full_case in process $proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39 in module Ownership.
Removed a total of 2 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 101 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).

4.2.5. Executing PROC_ARST pass (detect async resets in processes).

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~55 debug messages>

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
     1/4: $0\hsync[0:0]
     2/4: $0\h_idx[9:0]
     3/4: $0\v_idx[9:0]
     4/4: $0\vsync[0:0]
Creating decoders for process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
     1/12: $4\blue[1:0]
     2/12: $4\green[1:0]
     3/12: $4\red[1:0]
     4/12: $3\blue[1:0]
     5/12: $3\green[1:0]
     6/12: $3\red[1:0]
     7/12: $2\blue[1:0]
     8/12: $2\green[1:0]
     9/12: $2\red[1:0]
    10/12: $1\blue[1:0]
    11/12: $1\green[1:0]
    12/12: $1\red[1:0]
Creating decoders for process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1558$535'.
     1/1: $1\currentTokenCol[6:0]
Creating decoders for process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1548$534'.
     1/1: $1\currentTokenRow[5:0]
Creating decoders for process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1391$533'.
Creating decoders for process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
     1/6: $3\nextStateConfirm[1:0]
     2/6: $2\nextStateConfirm[1:0]
     3/6: $1\debounceClear[0:0]
     4/6: $1\debounceCountEn[0:0]
     5/6: $1\nextStateConfirm[1:0]
     6/6: $1\inputConfirmLimited[0:0]
Creating decoders for process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525'.
     1/2: $0\currStateConfirm[1:0]
     2/2: $0\debounceCount[22:0]
Creating decoders for process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
Creating decoders for process `$paramod\RangeCheck\w=s32'00000000000000000000000000001001.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$576'.
Creating decoders for process `$paramod\RangeCheck\w=s32'00000000000000000000000000001010.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$571'.
Creating decoders for process `\LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:571$396'.
Creating decoders for process `\LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:566$395'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:548$393'.
Creating decoders for process `\LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:543$392'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:525$390'.
Creating decoders for process `\LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:520$389'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:502$387'.
Creating decoders for process `\LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:497$386'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:479$384'.
Creating decoders for process `\LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:474$383'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:456$381'.
Creating decoders for process `\LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:451$380'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:433$378'.
Creating decoders for process `\LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:428$377'.
     1/1: $0\outputFF[3:0]
Creating decoders for process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:342$376'.
Creating decoders for process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
     1/11: $4\nextState[4:0]
     2/11: $3\nextState[4:0]
     3/11: $2\nextState[4:0]
     4/11: $1\nextState[4:0]
     5/11: $1\timeOutEn[0:0]
     6/11: $1\timeOutClear[0:0]
     7/11: $1\bot_move[6:0]
     8/11: $1\bot_confirm[0:0]
     9/11: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:393$351[6:0]$361
    10/11: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:393$350[6:0]$360
    11/11: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:393$349[6:0]$359
Creating decoders for process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:357$354'.
     1/7: $7\selectedMove[6:0]
     2/7: $6\selectedMove[6:0]
     3/7: $5\selectedMove[6:0]
     4/7: $4\selectedMove[6:0]
     5/7: $3\selectedMove[6:0]
     6/7: $2\selectedMove[6:0]
     7/7: $1\selectedMove[6:0]
Creating decoders for process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352'.
     1/2: $0\currState[4:0]
     2/2: $0\timeOut[22:0]
Creating decoders for process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:306$327'.
Creating decoders for process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
Creating decoders for process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311'.
     1/1: $1\currentPlayer[0:0]
Creating decoders for process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309'.
     1/3: $3\nextState[0:0]
     2/3: $2\nextState[0:0]
     3/3: $1\nextState[0:0]
Creating decoders for process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:213$308'.
     1/1: $1\currState[0:0]
Creating decoders for process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306'.
     1/4: $3\move[6:0]
     2/4: $2\move[6:0]
     3/4: $1\confirm[0:0]
     4/4: $1\move[6:0]
Creating decoders for process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
     1/126: $9$lookahead\tokens$38[83:0]$291
     2/126: $9$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$289
     3/126: $9$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$288
     4/126: $9$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$290
     5/126: $8$lookahead\tokens$38[83:0]$267
     6/126: $8$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$262
     7/126: $8$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$261
     8/126: $8$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$263
     9/126: $8$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$266
    10/126: $8$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$265
    11/126: $8$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$264
    12/126: $7$lookahead\tokens$38[83:0]$240
    13/126: $7$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$232
    14/126: $7$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$231
    15/126: $7$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$233
    16/126: $7$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$239
    17/126: $7$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$238
    18/126: $7$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$237
    19/126: $7$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$236
    20/126: $7$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$235
    21/126: $7$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$234
    22/126: $6$lookahead\tokens$38[83:0]$210
    23/126: $6$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$199
    24/126: $6$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$198
    25/126: $6$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$200
    26/126: $6$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$209
    27/126: $6$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$208
    28/126: $6$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$207
    29/126: $6$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$206
    30/126: $6$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$205
    31/126: $6$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$204
    32/126: $6$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$203
    33/126: $6$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$202
    34/126: $6$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$201
    35/126: $5$lookahead\tokens$38[83:0]$177
    36/126: $5$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19[83:0]$163
    37/126: $5$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18[83:0]$162
    38/126: $5$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20[31:0]$164
    39/126: $5$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$176
    40/126: $5$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$175
    41/126: $5$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$174
    42/126: $5$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$173
    43/126: $5$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$172
    44/126: $5$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$171
    45/126: $5$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$170
    46/126: $5$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$169
    47/126: $5$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$168
    48/126: $5$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$167
    49/126: $5$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$166
    50/126: $5$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$165
    51/126: $4$lookahead\tokens$38[83:0]$141
    52/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:162$16[83:0]$124
    53/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:162$15[83:0]$123
    54/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:162$17[31:0]$125
    55/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$140
    56/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$139
    57/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$138
    58/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$137
    59/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$136
    60/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$135
    61/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$134
    62/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$133
    63/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$132
    64/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$131
    65/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$130
    66/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$129
    67/126: $4$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20[31:0]$128
    68/126: $4$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19[83:0]$127
    69/126: $4$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18[83:0]$126
    70/126: $3$lookahead\tokens$38[83:0]$116
    71/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$115
    72/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$114
    73/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$113
    74/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$112
    75/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$111
    76/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$110
    77/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$109
    78/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$108
    79/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$107
    80/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$106
    81/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$105
    82/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$104
    83/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20[31:0]$103
    84/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19[83:0]$102
    85/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18[83:0]$101
    86/126: $3$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:162$17[31:0]$100
    87/126: $3$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:162$16[83:0]$99
    88/126: $3$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:162$15[83:0]$98
    89/126: $2$lookahead\tokens$38[83:0]$96
    90/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$95
    91/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$94
    92/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$93
    93/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$92
    94/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$91
    95/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$90
    96/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$89
    97/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$88
    98/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$87
    99/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$86
   100/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$85
   101/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$84
   102/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20[31:0]$83
   103/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19[83:0]$82
   104/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18[83:0]$81
   105/126: $2$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:162$17[31:0]$80
   106/126: $2$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:162$16[83:0]$79
   107/126: $2$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:162$15[83:0]$78
   108/126: $1$lookahead\tokens$38[83:0]$77
   109/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32[31:0]$76
   110/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31[83:0]$75
   111/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30[83:0]$74
   112/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29[31:0]$73
   113/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28[83:0]$72
   114/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27[83:0]$71
   115/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26[31:0]$70
   116/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25[83:0]$69
   117/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24[83:0]$68
   118/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23[31:0]$67
   119/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22[83:0]$66
   120/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21[83:0]$65
   121/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20[31:0]$64
   122/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19[83:0]$63
   123/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18[83:0]$62
   124/126: $1$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:162$17[31:0]$61
   125/126: $1$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:162$16[83:0]$60
   126/126: $1$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:162$15[83:0]$59

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Colors.\red' from process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
No latch inferred for signal `\Colors.\blue' from process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
No latch inferred for signal `\Colors.\green' from process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
No latch inferred for signal `\Colors.\currentTokenCol' from process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1558$535'.
No latch inferred for signal `\Colors.\currentTokenRow' from process `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1548$534'.
No latch inferred for signal `\TopChip.\debounceLimit' from process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1391$533'.
No latch inferred for signal `\TopChip.\debounceCountEn' from process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
No latch inferred for signal `\TopChip.\inputConfirmLimited' from process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
No latch inferred for signal `\TopChip.\nextStateConfirm' from process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
Latch inferred for signal `\TopChip.\debounceClear' from process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527': $auto$proc_dlatch.cc:427:proc_dlatch$2501
No latch inferred for signal `$paramod\RangeCheck\w=s32'00000000000000000000000000001001.\is_between' from process `$paramod\RangeCheck\w=s32'00000000000000000000000000001001.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$576'.
No latch inferred for signal `$paramod\RangeCheck\w=s32'00000000000000000000000000001010.\is_between' from process `$paramod\RangeCheck\w=s32'00000000000000000000000000001010.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$571'.
No latch inferred for signal `\LSFR6.\inputFF' from process `\LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:571$396'.
No latch inferred for signal `\LSFR5.\inputFF' from process `\LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:548$393'.
No latch inferred for signal `\LSFR4.\inputFF' from process `\LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:525$390'.
No latch inferred for signal `\LSFR3.\inputFF' from process `\LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:502$387'.
No latch inferred for signal `\LSFR2.\inputFF' from process `\LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:479$384'.
No latch inferred for signal `\LSFR1.\inputFF' from process `\LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:456$381'.
No latch inferred for signal `\LSFR0.\inputFF' from process `\LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:433$378'.
No latch inferred for signal `\PvEFSM.\timeOutDelay' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:342$376'.
No latch inferred for signal `\PvEFSM.\nextState' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.\bot_move' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.\bot_confirm' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.\timeOutEn' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.\timeOutClear' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:393$349' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:393$350' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:393$351' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
No latch inferred for signal `\PvEFSM.\selectedMove' from process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:357$354'.
No latch inferred for signal `\PvE.\wantToMove' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:306$327'.
No latch inferred for signal `\PvE.\col0Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col1Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col2Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col3Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col4Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col5Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\PvE.\col6Full' from process `\PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
No latch inferred for signal `\currentPlayerFSM.\currentPlayer' from process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311'.
No latch inferred for signal `\currentPlayerFSM.\nextState' from process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309'.
No latch inferred for signal `\Ownership.\move' from process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306'.
No latch inferred for signal `\Ownership.\confirm' from process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306'.

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\vga.\hsync' using process `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
  created $dff cell `$procdff$2510' with positive edge clock.
Creating register for signal `\vga.\vsync' using process `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
  created $dff cell `$procdff$2511' with positive edge clock.
Creating register for signal `\vga.\v_idx' using process `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
  created $dff cell `$procdff$2512' with positive edge clock.
Creating register for signal `\vga.\h_idx' using process `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
  created $dff cell `$procdff$2513' with positive edge clock.
Creating register for signal `\TopChip.\debounceCount' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525'.
  created $dff cell `$procdff$2514' with positive edge clock.
Creating register for signal `\TopChip.\currStateConfirm' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525'.
  created $dff cell `$procdff$2515' with positive edge clock.
Creating register for signal `\TopChip.\inputMovesHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2516' with positive edge clock.
Creating register for signal `\TopChip.\inputMovesSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2517' with positive edge clock.
Creating register for signal `\TopChip.\inputConfirmHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2518' with positive edge clock.
Creating register for signal `\TopChip.\inputConfirmSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2519' with positive edge clock.
Creating register for signal `\TopChip.\inputSwitchPlayerHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2520' with positive edge clock.
Creating register for signal `\TopChip.\inputSwitchPlayerSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2521' with positive edge clock.
Creating register for signal `\TopChip.\inputSwitchPVPHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2522' with positive edge clock.
Creating register for signal `\TopChip.\inputSwitchPVPSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2523' with positive edge clock.
Creating register for signal `\TopChip.\inputNewGameHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2524' with positive edge clock.
Creating register for signal `\TopChip.\inputNewGameSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2525' with positive edge clock.
Creating register for signal `\TopChip.\inputChangeDebugHalf' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2526' with positive edge clock.
Creating register for signal `\TopChip.\inputChangeDebugSync' using process `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
  created $dff cell `$procdff$2527' with positive edge clock.
Creating register for signal `\LSFR6.\outputFF' using process `\LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:566$395'.
  created $dff cell `$procdff$2528' with positive edge clock.
Creating register for signal `\LSFR5.\outputFF' using process `\LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:543$392'.
  created $dff cell `$procdff$2529' with positive edge clock.
Creating register for signal `\LSFR4.\outputFF' using process `\LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:520$389'.
  created $dff cell `$procdff$2530' with positive edge clock.
Creating register for signal `\LSFR3.\outputFF' using process `\LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:497$386'.
  created $dff cell `$procdff$2531' with positive edge clock.
Creating register for signal `\LSFR2.\outputFF' using process `\LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:474$383'.
  created $dff cell `$procdff$2532' with positive edge clock.
Creating register for signal `\LSFR1.\outputFF' using process `\LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:451$380'.
  created $dff cell `$procdff$2533' with positive edge clock.
Creating register for signal `\LSFR0.\outputFF' using process `\LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:428$377'.
  created $dff cell `$procdff$2534' with positive edge clock.
Creating register for signal `\PvEFSM.\currState' using process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352'.
  created $dff cell `$procdff$2535' with positive edge clock.
Creating register for signal `\PvEFSM.\timeOut' using process `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352'.
  created $dff cell `$procdff$2536' with positive edge clock.
Creating register for signal `\currentPlayerFSM.\currState' using process `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:213$308'.
  created $dff cell `$procdff$2537' with positive edge clock.
Creating register for signal `\Ownership.\tokens' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2538' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:162$15' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2539' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:162$16' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2540' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:162$17' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2541' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:164$18' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2542' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:164$19' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2543' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:164$20' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2544' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:166$21' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2545' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:166$22' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2546' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:166$23' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2547' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:168$24' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2548' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:168$25' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2549' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:168$26' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2550' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:170$27' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2551' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:170$28' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2552' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:170$29' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2553' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$mask$d10_jjalacce_connect4/src/verilogCHIP.v:172$30' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2554' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$data$d10_jjalacce_connect4/src/verilogCHIP.v:172$31' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2555' with positive edge clock.
Creating register for signal `\Ownership.$bitselwrite$sel$d10_jjalacce_connect4/src/verilogCHIP.v:172$32' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2556' with positive edge clock.
Creating register for signal `\Ownership.$lookahead\tokens$38' using process `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
  created $dff cell `$procdff$2557' with positive edge clock.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
Removing empty process `vga.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1614$560'.
Found and cleaned up 4 empty switches in `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
Removing empty process `Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1571$554'.
Found and cleaned up 1 empty switch in `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1558$535'.
Removing empty process `Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1558$535'.
Found and cleaned up 1 empty switch in `\Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1548$534'.
Removing empty process `Colors.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1548$534'.
Removing empty process `TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1391$533'.
Found and cleaned up 3 empty switches in `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
Removing empty process `TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1423$527'.
Found and cleaned up 3 empty switches in `\TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525'.
Removing empty process `TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1411$525'.
Removing empty process `TopChip.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1394$524'.
Removing empty process `$paramod\RangeCheck\w=s32'00000000000000000000000000001001.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$576'.
Removing empty process `$paramod\RangeCheck\w=s32'00000000000000000000000000001010.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:1305$571'.
Removing empty process `LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:571$396'.
Found and cleaned up 1 empty switch in `\LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:566$395'.
Removing empty process `LSFR6.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:566$395'.
Removing empty process `LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:548$393'.
Found and cleaned up 1 empty switch in `\LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:543$392'.
Removing empty process `LSFR5.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:543$392'.
Removing empty process `LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:525$390'.
Found and cleaned up 1 empty switch in `\LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:520$389'.
Removing empty process `LSFR4.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:520$389'.
Removing empty process `LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:502$387'.
Found and cleaned up 1 empty switch in `\LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:497$386'.
Removing empty process `LSFR3.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:497$386'.
Removing empty process `LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:479$384'.
Found and cleaned up 1 empty switch in `\LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:474$383'.
Removing empty process `LSFR2.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:474$383'.
Removing empty process `LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:456$381'.
Found and cleaned up 1 empty switch in `\LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:451$380'.
Removing empty process `LSFR1.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:451$380'.
Removing empty process `LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:433$378'.
Found and cleaned up 1 empty switch in `\LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:428$377'.
Removing empty process `LSFR0.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:428$377'.
Removing empty process `PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:342$376'.
Found and cleaned up 4 empty switches in `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
Removing empty process `PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:374$355'.
Found and cleaned up 7 empty switches in `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:357$354'.
Removing empty process `PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:357$354'.
Found and cleaned up 3 empty switches in `\PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352'.
Removing empty process `PvEFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:345$352'.
Removing empty process `PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:306$327'.
Removing empty process `PvE.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:297$312'.
Found and cleaned up 1 empty switch in `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311'.
Removing empty process `currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:231$311'.
Found and cleaned up 3 empty switches in `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309'.
Removing empty process `currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:218$309'.
Found and cleaned up 1 empty switch in `\currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:213$308'.
Removing empty process `currentPlayerFSM.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:213$308'.
Found and cleaned up 3 empty switches in `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306'.
Removing empty process `Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:173$306'.
Found and cleaned up 9 empty switches in `\Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
Removing empty process `Ownership.$proc$d10_jjalacce_connect4/src/verilogCHIP.v:154$39'.
Cleaned up 55 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga.
Optimizing module Colors.
Optimizing module TopChip.
<suppressed ~7 debug messages>
Optimizing module $paramod\RangeCheck\w=s32'00000000000000000000000000001001.
Optimizing module $paramod\RangeCheck\w=s32'00000000000000000000000000001010.
Optimizing module Token.
Optimizing module LSFR6.
Optimizing module LSFR5.
Optimizing module LSFR4.
Optimizing module LSFR3.
Optimizing module LSFR2.
Optimizing module LSFR1.
Optimizing module LSFR0.
Optimizing module PvEFSM.
<suppressed ~8 debug messages>
Optimizing module PvE.
<suppressed ~7 debug messages>
Optimizing module currentPlayerFSM.
<suppressed ~5 debug messages>
Optimizing module Ownership.
<suppressed ~104 debug messages>
Optimizing module Board.
Optimizing module my_chip.
Optimizing module toplevel_chip.

4.3. Executing FLATTEN pass (flatten design).
Deleting now unused module vga.
Deleting now unused module Colors.
Deleting now unused module TopChip.
Deleting now unused module $paramod\RangeCheck\w=s32'00000000000000000000000000001001.
Deleting now unused module $paramod\RangeCheck\w=s32'00000000000000000000000000001010.
Deleting now unused module Token.
Deleting now unused module LSFR6.
Deleting now unused module LSFR5.
Deleting now unused module LSFR4.
Deleting now unused module LSFR3.
Deleting now unused module LSFR2.
Deleting now unused module LSFR1.
Deleting now unused module LSFR0.
Deleting now unused module PvEFSM.
Deleting now unused module PvE.
Deleting now unused module currentPlayerFSM.
Deleting now unused module Ownership.
Deleting now unused module Board.
Deleting now unused module my_chip.
<suppressed ~116 debug messages>

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~58 debug messages>

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 502 unused cells and 1650 unused wires.
<suppressed ~579 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Warning: Wire toplevel_chip.\io_out [11] is used but has no driver.
Warning: Wire toplevel_chip.\io_out [10] is used but has no driver.
Warning: Wire toplevel_chip.\io_out [3] is used but has no driver.
Found and reported 3 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~759 debug messages>
Removed a total of 253 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$951.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$963.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$975.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$978.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$981.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$984.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$987.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$990.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$993.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$996.
    dead port 2/2 on $mux $flatten\mchip.\design.$procmux$713.
    dead port 2/2 on $mux $flatten\mchip.\design.$procmux$720.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.\fsm.$procmux$927.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.\fsm.$procmux$933.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$774.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$783.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$785.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$793.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$830.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$833.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$836.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$839.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$842.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$845.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$851.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$854.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$857.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$860.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$863.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$869.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$872.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$875.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$878.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$884.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$887.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$890.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$896.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$899.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.\fsm.$procmux$905.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$1935.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$610.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$613.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$616.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$621.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$624.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$627.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$632.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$635.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$638.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$644.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$647.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$653.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$656.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$662.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$665.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$671.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$677.
    dead port 1/2 on $mux $flatten\mchip.\design.\colors.$procmux$683.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$2334.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1938.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1941.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$2163.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$2166.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1083.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1086.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1089.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1092.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$1095.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1098.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1101.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1251.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1254.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1257.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$1260.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1263.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1266.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1461.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1464.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$1467.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1470.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1473.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1695.
    dead port 2/2 on $mux $flatten\mchip.\design.\owner.$procmux$1698.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1701.
    dead port 1/2 on $mux $flatten\mchip.\design.\owner.$procmux$1704.
Removed 85 multiplexer ports.
<suppressed ~139 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
  Optimizing cells in module \toplevel_chip.
Performed a total of 2 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~219 debug messages>
Removed a total of 73 cells.

4.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $flatten\mchip.\design.$auto$proc_dlatch.cc:427:proc_dlatch$2501 ($dlatch) from module toplevel_chip.

4.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 420 unused wires.
<suppressed ~1 debug messages>

4.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1 debug messages>

4.7.9. Rerunning OPT passes. (Maybe there is more to do..)

4.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

4.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    New ctrl vector for $pmux cell $flatten\mchip.\design.\owner.\fsm.$procmux$935: $auto$opt_reduce.cc:134:opt_pmux$2559
  Optimizing cells in module \toplevel_chip.
Performed a total of 1 changes.

4.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.7.13. Executing OPT_DFF pass (perform DFF optimizations).

4.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~2 debug messages>

4.7.16. Rerunning OPT passes. (Maybe there is more to do..)

4.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

4.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.7.20. Executing OPT_DFF pass (perform DFF optimizations).

4.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.7.23. Rerunning OPT passes. (Maybe there is more to do..)

4.7.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

4.7.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.7.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.7.27. Executing OPT_DFF pass (perform DFF optimizations).

4.7.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.7.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.7.30. Finished OPT passes. (There is nothing left to do.)

4.8. Executing FSM pass (extract and optimize FSM).

4.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register toplevel_chip.mchip.design.currStateConfirm.
Found FSM state register toplevel_chip.mchip.design.pve.fsm.currState.

4.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\mchip.design.currStateConfirm' from module `\toplevel_chip'.
  found $dff cell for state register: $flatten\mchip.\design.$procdff$2515
  root of input selection tree: $flatten\mchip.\design.$0\currStateConfirm[1:0]
  found reset state: 2'10 (guessed from mux tree)
  found ctrl input: \io_in [13]
  found ctrl input: $flatten\mchip.\design.$auto$rtlil.cc:2465:ReduceOr$2508
  found ctrl input: $flatten\mchip.\design.$procmux$721_CMP
  found ctrl input: $flatten\mchip.\design.$procmux$732_CMP
  found state code: 2'10
  found ctrl input: $flatten\mchip.\design.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:1445$530_Y
  found state code: 2'01
  found ctrl input: \mchip.design.inputConfirmSync
  found state code: 2'00
  found ctrl output: $flatten\mchip.\design.$auto$rtlil.cc:2465:ReduceOr$2508
  found ctrl output: $flatten\mchip.\design.$procmux$721_CMP
  found ctrl output: $flatten\mchip.\design.$procmux$732_CMP
  ctrl inputs: { $flatten\mchip.\design.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:1445$530_Y \mchip.design.inputConfirmSync \io_in [13] }
  ctrl outputs: { $flatten\mchip.\design.$auto$rtlil.cc:2465:ReduceOr$2508 $flatten\mchip.\design.$procmux$732_CMP $flatten\mchip.\design.$procmux$721_CMP $flatten\mchip.\design.$0\currStateConfirm[1:0] }
  transition:       2'00 3'--0 ->       2'01 5'01001
  transition:       2'00 3'--1 ->       2'10 5'01010
  transition:       2'10 3'-00 ->       2'10 5'00110
  transition:       2'10 3'-10 ->       2'00 5'00100
  transition:       2'10 3'--1 ->       2'10 5'00110
  transition:       2'01 3'0-0 ->       2'01 5'10001
  transition:       2'01 3'1-0 ->       2'10 5'10010
  transition:       2'01 3'--1 ->       2'10 5'10010
Extracting FSM `\mchip.design.pve.fsm.currState' from module `\toplevel_chip'.
  found $dff cell for state register: $flatten\mchip.\design.\pve.\fsm.$procdff$2535
  root of input selection tree: $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0]
  found reset state: 5'00000 (guessed from mux tree)
  found ctrl input: \io_in [13]
  found ctrl input: $flatten\mchip.\design.\pve.\fsm.$procmux$775_CMP
  found ctrl input: $flatten\mchip.\design.\pve.\fsm.$procmux$798_CMP
  found ctrl input: $flatten\mchip.\design.\pve.\fsm.$procmux$786_CMP
  found state code: 5'00000
  found ctrl input: $flatten\mchip.\design.\pve.\fsm.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:404$375_Y
  found state code: 5'00010
  found ctrl input: \mchip.design.inputSwitchPlayerSync
  found ctrl input: $flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363_Y
  found state code: 5'00001
  found ctrl output: $flatten\mchip.\design.\pve.\fsm.$procmux$775_CMP
  found ctrl output: $flatten\mchip.\design.\pve.\fsm.$procmux$786_CMP
  found ctrl output: $flatten\mchip.\design.\pve.\fsm.$procmux$798_CMP
  ctrl inputs: { $flatten\mchip.\design.\pve.\fsm.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:404$375_Y $flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363_Y \mchip.design.inputSwitchPlayerSync \io_in [13] }
  ctrl outputs: { $flatten\mchip.\design.\pve.\fsm.$procmux$798_CMP $flatten\mchip.\design.\pve.\fsm.$procmux$786_CMP $flatten\mchip.\design.\pve.\fsm.$procmux$775_CMP $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] }
  transition:    5'00000 4'--00 ->    5'00000 8'01000000
  transition:    5'00000 4'-010 ->    5'00000 8'01000000
  transition:    5'00000 4'-110 ->    5'00001 8'01000001
  transition:    5'00000 4'---1 ->    5'00000 8'01000000
  transition:    5'00010 4'0--0 ->    5'00010 8'00100010
  transition:    5'00010 4'1--0 ->    5'00000 8'00100000
  transition:    5'00010 4'---1 ->    5'00000 8'00100000
  transition:    5'00001 4'---0 ->    5'00010 8'10000010
  transition:    5'00001 4'---1 ->    5'00000 8'10000000

4.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mchip.design.pve.fsm.currState$2565' from module `\toplevel_chip'.
Optimizing FSM `$fsm$\mchip.design.currStateConfirm$2560' from module `\toplevel_chip'.

4.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 17 unused cells and 17 unused wires.
<suppressed ~20 debug messages>

4.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mchip.design.currStateConfirm$2560' from module `\toplevel_chip'.
  Removing unused output signal $flatten\mchip.\design.$0\currStateConfirm[1:0] [0].
  Removing unused output signal $flatten\mchip.\design.$0\currStateConfirm[1:0] [1].
  Removing unused output signal $flatten\mchip.\design.$procmux$721_CMP.
Optimizing FSM `$fsm$\mchip.design.pve.fsm.currState$2565' from module `\toplevel_chip'.
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] [0].
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] [1].
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] [2].
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] [3].
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$0\currState[4:0] [4].
  Removing unused output signal $flatten\mchip.\design.\pve.\fsm.$procmux$786_CMP.

4.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\mchip.design.currStateConfirm$2560' from module `\toplevel_chip' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> -1-
  10 -> --1
  01 -> 1--
Recoding FSM `$fsm$\mchip.design.pve.fsm.currState$2565' from module `\toplevel_chip' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000 -> --1
  00010 -> -1-
  00001 -> 1--

4.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\mchip.design.currStateConfirm$2560' from module `toplevel_chip':
-------------------------------------

  Information on FSM $fsm$\mchip.design.currStateConfirm$2560 (\mchip.design.currStateConfirm):

  Number of input signals:    3
  Number of output signals:   2
  Number of state bits:       3

  Input signals:
    0: \io_in [13]
    1: \mchip.design.inputConfirmSync
    2: $flatten\mchip.\design.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:1445$530_Y

  Output signals:
    0: $flatten\mchip.\design.$procmux$732_CMP
    1: $flatten\mchip.\design.$auto$rtlil.cc:2465:ReduceOr$2508

  State encoding:
    0:      3'-1-
    1:      3'--1  <RESET STATE>
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 3'--1   ->     1 2'01
      1:     0 3'--0   ->     2 2'01
      2:     1 3'-10   ->     0 2'00
      3:     1 3'-00   ->     1 2'00
      4:     1 3'--1   ->     1 2'00
      5:     2 3'1-0   ->     1 2'10
      6:     2 3'--1   ->     1 2'10
      7:     2 3'0-0   ->     2 2'10

-------------------------------------

FSM `$fsm$\mchip.design.pve.fsm.currState$2565' from module `toplevel_chip':
-------------------------------------

  Information on FSM $fsm$\mchip.design.pve.fsm.currState$2565 (\mchip.design.pve.fsm.currState):

  Number of input signals:    4
  Number of output signals:   2
  Number of state bits:       3

  Input signals:
    0: \io_in [13]
    1: \mchip.design.inputSwitchPlayerSync
    2: $flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363_Y
    3: $flatten\mchip.\design.\pve.\fsm.$logic_and$d10_jjalacce_connect4/src/verilogCHIP.v:404$375_Y

  Output signals:
    0: $flatten\mchip.\design.\pve.\fsm.$procmux$775_CMP
    1: $flatten\mchip.\design.\pve.\fsm.$procmux$798_CMP

  State encoding:
    0:      3'--1  <RESET STATE>
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 4'--00   ->     0 2'00
      1:     0 4'-010   ->     0 2'00
      2:     0 4'---1   ->     0 2'00
      3:     0 4'-110   ->     2 2'00
      4:     1 4'1--0   ->     0 2'01
      5:     1 4'---1   ->     0 2'01
      6:     1 4'0--0   ->     1 2'01
      7:     2 4'---1   ->     0 2'10
      8:     2 4'---0   ->     1 2'10

-------------------------------------

4.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\mchip.design.currStateConfirm$2560' from module `\toplevel_chip'.
Mapping FSM `$fsm$\mchip.design.pve.fsm.currState$2565' from module `\toplevel_chip'.

4.9. Executing OPT pass (performing simple optimizations).

4.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~8 debug messages>

4.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~67 debug messages>

4.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\mchip.\design.\vga.$procdff$2513 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561_Y [9:0], Q = \mchip.design.vga.h_idx, rval = 10'0000000000).
Adding SRST signal on $flatten\mchip.\design.\vga.$procdff$2512 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$procmux$594_Y, Q = \mchip.design.vga.v_idx, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$2633 ($sdff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$procmux$592_Y, Q = \mchip.design.vga.v_idx).
Adding SRST signal on $flatten\mchip.\design.\vga.$procdff$2511 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$procmux$602_Y, Q = \mchip.design.vga.vsync, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$2635 ($sdff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$procmux$600_Y, Q = \mchip.design.vga.vsync).
Adding SRST signal on $flatten\mchip.\design.\vga.$procdff$2510 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\vga.$procmux$582_Y, Q = \mchip.design.vga.hsync, rval = 1'1).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand6.$procdff$2528 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand6.outputFF [2:0] \mchip.design.pve.rand6.inputFF [0] }, Q = \mchip.design.pve.rand6.outputFF, rval = 4'0101).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand5.$procdff$2529 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand5.outputFF [2:0] \mchip.design.pve.rand5.inputFF [0] }, Q = \mchip.design.pve.rand5.outputFF, rval = 4'0011).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand4.$procdff$2530 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand4.outputFF [2:0] \mchip.design.pve.rand4.inputFF [0] }, Q = \mchip.design.pve.rand4.outputFF, rval = 4'1001).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand3.$procdff$2531 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand3.outputFF [2:0] \mchip.design.pve.rand3.inputFF [0] }, Q = \mchip.design.pve.rand3.outputFF, rval = 4'1100).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand2.$procdff$2532 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand2.outputFF [2:0] \mchip.design.pve.rand2.inputFF [0] }, Q = \mchip.design.pve.rand2.outputFF, rval = 4'1101).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand1.$procdff$2533 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand1.outputFF [2:0] \mchip.design.pve.rand1.inputFF [0] }, Q = \mchip.design.pve.rand1.outputFF, rval = 4'0011).
Adding SRST signal on $flatten\mchip.\design.\pve.\rand0.$procdff$2534 ($dff) from module toplevel_chip (D = { \mchip.design.pve.rand0.outputFF [2:0] \mchip.design.pve.rand0.inputFF [0] }, Q = \mchip.design.pve.rand0.outputFF, rval = 4'1111).
Adding SRST signal on $flatten\mchip.\design.\pve.\fsm.$procdff$2536 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\pve.\fsm.$procmux$913_Y, Q = \mchip.design.pve.fsm.timeOut, rval = 23'00000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$2645 ($sdff) from module toplevel_chip (D = $flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353_Y, Q = \mchip.design.pve.fsm.timeOut).
Adding SRST signal on $flatten\mchip.\design.\owner.\fsm.$procdff$2537 ($dff) from module toplevel_chip (D = \mchip.design.owner.fsm.nextState, Q = \mchip.design.owner.fsm.currState, rval = 1'0).
Adding SRST signal on $flatten\mchip.\design.\owner.$procdff$2538 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.\owner.$3$lookahead\tokens$38[83:0]$116, Q = \mchip.design.owner.tokens, rval = 84'000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$2652 ($sdff) from module toplevel_chip (D = $flatten\mchip.\design.\owner.$4$lookahead\tokens$38[83:0]$141, Q = \mchip.design.owner.tokens).
Adding SRST signal on $flatten\mchip.\design.$procdff$2514 ($dff) from module toplevel_chip (D = $flatten\mchip.\design.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1419$526_Y, Q = \mchip.design.debounceCount, rval = 23'00000000000000000000000).

4.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 23 unused cells and 38 unused wires.
<suppressed ~24 debug messages>

4.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1 debug messages>

4.9.9. Rerunning OPT passes. (Maybe there is more to do..)

4.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

4.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.9.13. Executing OPT_DFF pass (perform DFF optimizations).

4.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.9.16. Finished OPT passes. (There is nothing left to do.)

4.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$auto$fsm_map.cc:77:implement_pattern_cache$2607 ($eq).
Removed top 23 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$557 ($lt).
Removed top 29 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536 ($sub).
Removed top 25 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536 ($sub).
Removed top 22 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1633$570 ($ge).
Removed top 23 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1629$568 ($lt).
Removed top 23 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1629$567 ($ge).
Removed top 31 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566 ($add).
Removed top 22 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566 ($add).
Removed top 22 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1626$565 ($ge).
Removed top 22 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1624$563 ($lt).
Removed top 22 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1624$562 ($ge).
Removed top 31 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561 ($add).
Removed top 22 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561 ($add).
Removed top 22 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$558 ($lt).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_7_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_6_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_5_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_5_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_4_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_4_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 4 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_V.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_6_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_5_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_4_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 2 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 4 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_H.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_6_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_5_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_4_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 3 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 9 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_3_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_2_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 2 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_1_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 8 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\board.\level_0_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_5_V_35.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_4_V_28.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_3_V_21.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_H_16.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_H_16.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_V_14.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_V_14.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_6_H_13.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_5_H_12.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_5_H_12.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_4_H_11.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_4_H_11.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_3_H_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_3_H_10.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_V_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_V_10.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_H_1.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_H_1.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 3 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_H_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_H_0.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$575 ($mux).
Removed top 2 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_V_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_V_0.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1305$580 ($mux).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_3_V_21.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_H_16.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_2_V_14.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_5_H_12.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_4_H_11.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 1 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_3_H_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 2 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_V_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 2 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_1_H_1.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 4 bits (of 10) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_H_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le).
Removed top 4 bits (of 9) from port A of cell toplevel_chip.$flatten\mchip.\design.\token.\level_0_V_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le).
Removed top 1 bits (of 6) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$708_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$707_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$706_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$705_CMP0 ($eq).
Removed top 3 bits (of 6) from mux cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$703 ($pmux).
Removed top 5 bits (of 6) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$704_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$701_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$700_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$699_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$698_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$697_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$695 ($pmux).
Removed top 6 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$procmux$696_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\colors.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1570$553 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\colors.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:1569$544 ($mux).
Removed top 1 bits (of 2) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$eq$d10_jjalacce_connect4/src/verilogCHIP.v:1569$543 ($eq).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539 ($add).
Removed top 1 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539 ($add).
Removed top 29 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538 ($sub).
Removed top 4 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538 ($sub).
Removed top 28 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538 ($sub).
Removed top 29 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\colors.$mul$d10_jjalacce_connect4/src/verilogCHIP.v:1569$537 ($mul).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\colors.$mul$d10_jjalacce_connect4/src/verilogCHIP.v:1569$537 ($mul).
Removed top 6 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$962_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$961_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$960_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$959_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$958_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$957_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$955 ($pmux).
Removed top 6 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$949_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$948_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$947_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$946_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$945_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$944_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\owner.$procmux$942 ($pmux).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$297 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$297 ($neg).
Removed top 26 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283 ($add).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283 ($add).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$273 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$273 ($neg).
Removed top 27 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256 ($add).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256 ($add).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$246 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$246 ($neg).
Removed top 27 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226 ($add).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226 ($add).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$216 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$216 ($neg).
Removed top 28 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193 ($add).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193 ($add).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$183 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$183 ($neg).
Removed top 29 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157 ($add).
Removed top 1 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157 ($add).
Removed top 1 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157 ($add).
Converting cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$147 ($neg) from signed to unsigned.
Removed top 1 bits (of 33) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$147 ($neg).
Removed top 29 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\owner.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:161$117 ($sub).
Removed top 24 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\owner.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:161$117 ($sub).
Removed top 4 bits (of 7) from port B of cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363 ($lt).
Removed top 24 bits (of 32) from port A of cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368 ($neg).
Converting cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368 ($neg) from signed to unsigned.
Removed top 1 bits (of 8) from port A of cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368 ($neg).
Removed top 25 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$shift$d10_jjalacce_connect4/src/verilogCHIP.v:0$369 ($shift).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$827 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$848 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$866 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$881 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$893 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$902 ($mux).
Removed top 3 bits (of 7) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$procmux$908 ($mux).
Removed top 22 bits (of 23) from port B of cell toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353 ($add).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:304$326 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:303$324 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:302$322 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:301$320 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:300$318 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:299$316 ($mux).
Removed top 31 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:298$314 ($mux).
Removed top 22 bits (of 23) from port B of cell toplevel_chip.$flatten\mchip.\design.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1419$526 ($add).
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\colors.$mul$d10_jjalacce_connect4/src/verilogCHIP.v:1569$537_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:161$118_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226_Y.
Removed top 1 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256_Y.
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$2\selectedMove[6:0].
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$3\selectedMove[6:0].
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$4\selectedMove[6:0].
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$5\selectedMove[6:0].
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$6\selectedMove[6:0].
Removed top 3 bits (of 7) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$7\selectedMove[6:0].
Removed top 12 bits (of 23) from wire toplevel_chip.$flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353_Y.
Removed top 22 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561_Y.
Removed top 22 bits (of 32) from wire toplevel_chip.$flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566_Y.

4.11. Executing PEEPOPT pass (run peephole optimizers).

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 62 unused wires.
<suppressed ~1 debug messages>

4.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  creating $macc model for $flatten\mchip.\design.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1419$526 ($add).
  creating $macc model for $flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539 ($add).
  creating $macc model for $flatten\mchip.\design.\colors.$mul$d10_jjalacce_connect4/src/verilogCHIP.v:1569$537 ($mul).
  creating $macc model for $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536 ($sub).
  creating $macc model for $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538 ($sub).
  creating $macc model for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157 ($add).
  creating $macc model for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193 ($add).
  creating $macc model for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226 ($add).
  creating $macc model for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256 ($add).
  creating $macc model for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283 ($add).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$147 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$183 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$216 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$246 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$273 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$297 ($neg).
  creating $macc model for $flatten\mchip.\design.\owner.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:161$117 ($sub).
  creating $macc model for $flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353 ($add).
  creating $macc model for $flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368 ($neg).
  creating $macc model for $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561 ($add).
  creating $macc model for $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566 ($add).
  merging $macc model for $flatten\mchip.\design.\colors.$mul$d10_jjalacce_connect4/src/verilogCHIP.v:1569$537 into $flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539.
  creating $alu model for $macc $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561.
  creating $alu model for $macc $flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368.
  creating $alu model for $macc $flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:161$117.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$297.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$273.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$246.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$216.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$183.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$147.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193.
  creating $alu model for $macc $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157.
  creating $alu model for $macc $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538.
  creating $alu model for $macc $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536.
  creating $alu model for $macc $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566.
  creating $alu model for $macc $flatten\mchip.\design.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1419$526.
  creating $macc cell for $flatten\mchip.\design.\colors.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1569$539: $auto$alumacc.cc:365:replace_macc$2682
  creating $alu model for $flatten\mchip.\design.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1445$529 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_0_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_0_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_0_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_0_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_1_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_1_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_1_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_1_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_2_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_2_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_2_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_2_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_3_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_3_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_3_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_3_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_4_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_4_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_4_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_4_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_5_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_5_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_5_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_5_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_6_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_6_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_6_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_6_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_7_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\board.\level_7_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\pve.\fsm.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:404$374 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363 ($lt): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_0_H_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_0_H_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_0_V_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_0_V_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_1_H_1.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_1_H_1.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_1_V_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_1_V_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_2_H_16.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_2_H_16.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_2_V_14.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_2_V_14.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_3_H_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_3_H_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_3_V_21.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_3_V_21.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_4_H_11.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_4_H_11.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_4_V_28.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_4_V_28.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_5_H_12.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_5_H_12.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_5_V_35.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_5_V_35.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_6_H_13.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\token.\level_6_H_13.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572 ($le): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1624$562 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1626$565 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1629$567 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1633$570 ($ge): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$557 ($lt): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$558 ($lt): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1624$563 ($lt): new $alu
  creating $alu model for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1629$568 ($lt): new $alu
  creating $alu cell for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1629$568: $auto$alumacc.cc:485:replace_alu$2750
  creating $alu cell for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1624$563: $auto$alumacc.cc:485:replace_alu$2761
  creating $alu cell for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$558: $auto$alumacc.cc:485:replace_alu$2766
  creating $alu cell for $flatten\mchip.\design.\vga.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:1613$557: $auto$alumacc.cc:485:replace_alu$2771
  creating $alu cell for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1633$570: $auto$alumacc.cc:485:replace_alu$2782
  creating $alu cell for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1629$567: $auto$alumacc.cc:485:replace_alu$2795
  creating $alu cell for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1626$565: $auto$alumacc.cc:485:replace_alu$2804
  creating $alu cell for $flatten\mchip.\design.\vga.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1624$562: $auto$alumacc.cc:485:replace_alu$2817
  creating $alu cell for $flatten\mchip.\design.\token.\level_6_H_13.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$2830
  creating $alu cell for $flatten\mchip.\design.\token.\level_6_H_13.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$2843
  creating $alu cell for $flatten\mchip.\design.\token.\level_5_V_35.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$2852
  creating $alu cell for $flatten\mchip.\design.\token.\level_5_V_35.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$2865
  creating $alu cell for $flatten\mchip.\design.\token.\level_5_H_12.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$2874
  creating $alu cell for $flatten\mchip.\design.\token.\level_5_H_12.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$2883
  creating $alu cell for $flatten\mchip.\design.\token.\level_4_V_28.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$2896
  creating $alu cell for $flatten\mchip.\design.\token.\level_4_V_28.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$2905
  creating $alu cell for $flatten\mchip.\design.\token.\level_4_H_11.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$2914
  creating $alu cell for $flatten\mchip.\design.\token.\level_4_H_11.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$2923
  creating $alu cell for $flatten\mchip.\design.\token.\level_3_V_21.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$2936
  creating $alu cell for $flatten\mchip.\design.\token.\level_3_V_21.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$2945
  creating $alu cell for $flatten\mchip.\design.\token.\level_3_H_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$2954
  creating $alu cell for $flatten\mchip.\design.\token.\level_3_H_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$2963
  creating $alu cell for $flatten\mchip.\design.\token.\level_2_V_14.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$2976
  creating $alu cell for $flatten\mchip.\design.\token.\level_2_V_14.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$2985
  creating $alu cell for $flatten\mchip.\design.\token.\level_2_H_16.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$2998
  creating $alu cell for $flatten\mchip.\design.\token.\level_2_H_16.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3007
  creating $alu cell for $flatten\mchip.\design.\token.\level_1_V_10.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3020
  creating $alu cell for $flatten\mchip.\design.\token.\level_1_V_10.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3029
  creating $alu cell for $flatten\mchip.\design.\token.\level_1_H_1.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3042
  creating $alu cell for $flatten\mchip.\design.\token.\level_1_H_1.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3051
  creating $alu cell for $flatten\mchip.\design.\token.\level_0_V_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3064
  creating $alu cell for $flatten\mchip.\design.\token.\level_0_V_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3073
  creating $alu cell for $flatten\mchip.\design.\token.\level_0_H_0.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3086
  creating $alu cell for $flatten\mchip.\design.\token.\level_0_H_0.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3095
  creating $alu cell for $flatten\mchip.\design.\pve.\fsm.$lt$d10_jjalacce_connect4/src/verilogCHIP.v:387$363: $auto$alumacc.cc:485:replace_alu$3108
  creating $alu cell for $flatten\mchip.\design.\pve.\fsm.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:404$374: $auto$alumacc.cc:485:replace_alu$3119
  creating $alu cell for $flatten\mchip.\design.\board.\level_7_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3132
  creating $alu cell for $flatten\mchip.\design.\board.\level_7_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3145
  creating $alu cell for $flatten\mchip.\design.\board.\level_6_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3158
  creating $alu cell for $flatten\mchip.\design.\board.\level_6_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3167
  creating $alu cell for $flatten\mchip.\design.\board.\level_6_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3176
  creating $alu cell for $flatten\mchip.\design.\board.\level_6_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3185
  creating $alu cell for $flatten\mchip.\design.\board.\level_5_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3194
  creating $alu cell for $flatten\mchip.\design.\board.\level_5_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3203
  creating $alu cell for $flatten\mchip.\design.\board.\level_5_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3216
  creating $alu cell for $flatten\mchip.\design.\board.\level_5_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3229
  creating $alu cell for $flatten\mchip.\design.\board.\level_4_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3238
  creating $alu cell for $flatten\mchip.\design.\board.\level_4_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3247
  creating $alu cell for $flatten\mchip.\design.\board.\level_4_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3260
  creating $alu cell for $flatten\mchip.\design.\board.\level_4_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3273
  creating $alu cell for $flatten\mchip.\design.\board.\level_3_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3282
  creating $alu cell for $flatten\mchip.\design.\board.\level_3_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3291
  creating $alu cell for $flatten\mchip.\design.\board.\level_3_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3304
  creating $alu cell for $flatten\mchip.\design.\board.\level_3_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3313
  creating $alu cell for $flatten\mchip.\design.\board.\level_2_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3326
  creating $alu cell for $flatten\mchip.\design.\board.\level_2_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3335
  creating $alu cell for $flatten\mchip.\design.\board.\level_2_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3348
  creating $alu cell for $flatten\mchip.\design.\board.\level_2_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3357
  creating $alu cell for $flatten\mchip.\design.\board.\level_1_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3370
  creating $alu cell for $flatten\mchip.\design.\board.\level_1_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3379
  creating $alu cell for $flatten\mchip.\design.\board.\level_1_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3392
  creating $alu cell for $flatten\mchip.\design.\board.\level_1_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3401
  creating $alu cell for $flatten\mchip.\design.\board.\level_0_V.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$572: $auto$alumacc.cc:485:replace_alu$3414
  creating $alu cell for $flatten\mchip.\design.\board.\level_0_V.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$573: $auto$alumacc.cc:485:replace_alu$3423
  creating $alu cell for $flatten\mchip.\design.\board.\level_0_H.$le$d10_jjalacce_connect4/src/verilogCHIP.v:1305$577: $auto$alumacc.cc:485:replace_alu$3436
  creating $alu cell for $flatten\mchip.\design.\board.\level_0_H.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1305$578: $auto$alumacc.cc:485:replace_alu$3445
  creating $alu cell for $flatten\mchip.\design.$ge$d10_jjalacce_connect4/src/verilogCHIP.v:1445$529: $auto$alumacc.cc:485:replace_alu$3458
  creating $alu cell for $flatten\mchip.\design.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1419$526: $auto$alumacc.cc:485:replace_alu$3471
  creating $alu cell for $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1628$566: $auto$alumacc.cc:485:replace_alu$3474
  creating $alu cell for $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536: $auto$alumacc.cc:485:replace_alu$3477
  creating $alu cell for $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$538: $auto$alumacc.cc:485:replace_alu$3480
  creating $alu cell for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:163$157: $auto$alumacc.cc:485:replace_alu$3483
  creating $alu cell for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:165$193: $auto$alumacc.cc:485:replace_alu$3486
  creating $alu cell for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:167$226: $auto$alumacc.cc:485:replace_alu$3489
  creating $alu cell for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:169$256: $auto$alumacc.cc:485:replace_alu$3492
  creating $alu cell for $flatten\mchip.\design.\owner.$add$d10_jjalacce_connect4/src/verilogCHIP.v:171$283: $auto$alumacc.cc:485:replace_alu$3495
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$147: $auto$alumacc.cc:485:replace_alu$3498
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$183: $auto$alumacc.cc:485:replace_alu$3501
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$216: $auto$alumacc.cc:485:replace_alu$3504
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$246: $auto$alumacc.cc:485:replace_alu$3507
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$273: $auto$alumacc.cc:485:replace_alu$3510
  creating $alu cell for $flatten\mchip.\design.\owner.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$297: $auto$alumacc.cc:485:replace_alu$3513
  creating $alu cell for $flatten\mchip.\design.\owner.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:161$117: $auto$alumacc.cc:485:replace_alu$3516
  creating $alu cell for $flatten\mchip.\design.\pve.\fsm.$add$d10_jjalacce_connect4/src/verilogCHIP.v:355$353: $auto$alumacc.cc:485:replace_alu$3519
  creating $alu cell for $flatten\mchip.\design.\pve.\fsm.$neg$d10_jjalacce_connect4/src/verilogCHIP.v:0$368: $auto$alumacc.cc:485:replace_alu$3522
  creating $alu cell for $flatten\mchip.\design.\vga.$add$d10_jjalacce_connect4/src/verilogCHIP.v:1623$561: $auto$alumacc.cc:485:replace_alu$3525
  created 86 $alu and 1 $macc cells.

4.14. Executing SHARE pass (SAT-based resource sharing).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~7 debug messages>

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:298$314.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:298$314.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:299$316.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:299$316.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:300$318.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:300$318.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:301$320.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:301$320.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:302$322.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:302$322.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:303$324.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:303$324.
    dead port 1/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:304$326.
    dead port 2/2 on $mux $flatten\mchip.\design.\pve.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:304$326.
Removed 14 multiplexer ports.
<suppressed ~50 debug messages>

4.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$2632: { $auto$rtlil.cc:2464:ReduceAnd$2810 $auto$rtlil.cc:2461:Not$2814 \io_in [13] }
  Optimizing cells in module \toplevel_chip.
Performed a total of 1 changes.

4.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.15.6. Executing OPT_DFF pass (perform DFF optimizations).

4.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 82 unused wires.
<suppressed ~9 debug messages>

4.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.15.9. Rerunning OPT passes. (Maybe there is more to do..)

4.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

4.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.15.13. Executing OPT_DFF pass (perform DFF optimizations).

4.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.15.16. Finished OPT passes. (There is nothing left to do.)

4.16. Executing MEMORY pass.

4.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~77 debug messages>

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~174 debug messages>
Removed a total of 58 cells.

4.18.3. Executing OPT_DFF pass (perform DFF optimizations).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 12 unused cells and 116 unused wires.
<suppressed ~13 debug messages>

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$650:
      Old ports: A=2'00, B=2'11, Y=$flatten\mchip.\design.\colors.$3\green[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\design.\colors.$3\green[1:0] [0]
      New connections: $flatten\mchip.\design.\colors.$3\green[1:0] [1] = $flatten\mchip.\design.\colors.$3\green[1:0] [0]
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$686:
      Old ports: A=2'00, B=2'11, Y=\mchip.design.VGA_Blue
      New ports: A=1'0, B=1'1, Y=\mchip.design.VGA_Blue [0]
      New connections: \mchip.design.VGA_Blue [1] = \mchip.design.VGA_Blue [0]
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\owner.$procmux$969:
      Old ports: A={ 3'000 $flatten\mchip.\design.\owner.$2\move[6:0] [3:0] }, B={ 3'000 $flatten\mchip.\design.\owner.$3\move[6:0] [3:0] }, Y=\mchip.design.owner.move
      New ports: A=$flatten\mchip.\design.\owner.$2\move[6:0] [3:0], B=$flatten\mchip.\design.\owner.$3\move[6:0] [3:0], Y=\mchip.design.owner.move [3:0]
      New connections: \mchip.design.owner.move [6:4] = 3'000
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\owner.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:153$36:
      Old ports: A=2'00, B=2'10, Y=$flatten\mchip.\design.\owner.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:153$36_Y
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\design.\owner.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:153$36_Y [1]
      New connections: $flatten\mchip.\design.\owner.$ternary$d10_jjalacce_connect4/src/verilogCHIP.v:153$36_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\pve.\fsm.$procmux$827:
      Old ports: A=4'1010, B=4'0000, Y=$auto$wreduce.cc:461:run$2678 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:461:run$2678 [1]
      New connections: { $auto$wreduce.cc:461:run$2678 [3:2] $auto$wreduce.cc:461:run$2678 [0] } = { $auto$wreduce.cc:461:run$2678 [1] 2'00 }
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$674:
      Old ports: A=$flatten\mchip.\design.\colors.$3\green[1:0], B=2'00, Y=$flatten\mchip.\design.\colors.$2\green[1:0]
      New ports: A=$flatten\mchip.\design.\colors.$3\green[1:0] [0], B=1'0, Y=$flatten\mchip.\design.\colors.$2\green[1:0] [0]
      New connections: $flatten\mchip.\design.\colors.$2\green[1:0] [1] = $flatten\mchip.\design.\colors.$2\green[1:0] [0]
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$680:
      Old ports: A=$flatten\mchip.\design.\colors.$3\green[1:0], B=2'11, Y=$flatten\mchip.\design.\colors.$2\red[1:0]
      New ports: A=$flatten\mchip.\design.\colors.$3\green[1:0] [0], B=1'1, Y=$flatten\mchip.\design.\colors.$2\red[1:0] [0]
      New connections: $flatten\mchip.\design.\colors.$2\red[1:0] [1] = $flatten\mchip.\design.\colors.$2\red[1:0] [0]
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\pve.\fsm.$procmux$848:
      Old ports: A=$auto$wreduce.cc:461:run$2678 [3:0], B=4'0110, Y=$auto$wreduce.cc:461:run$2677 [3:0]
      New ports: A={ $auto$wreduce.cc:461:run$2678 [1] 1'0 $auto$wreduce.cc:461:run$2678 [1] }, B=3'011, Y=$auto$wreduce.cc:461:run$2677 [3:1]
      New connections: $auto$wreduce.cc:461:run$2677 [0] = 1'0
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$689:
      Old ports: A=$flatten\mchip.\design.\colors.$2\green[1:0], B=2'00, Y=\mchip.design.VGA_Green
      New ports: A=$flatten\mchip.\design.\colors.$2\green[1:0] [0], B=1'0, Y=\mchip.design.VGA_Green [0]
      New connections: \mchip.design.VGA_Green [1] = \mchip.design.VGA_Green [0]
    Consolidated identical input bits for $mux cell $flatten\mchip.\design.\colors.$procmux$692:
      Old ports: A=$flatten\mchip.\design.\colors.$2\red[1:0], B=2'00, Y=\mchip.design.VGA_Red
      New ports: A=$flatten\mchip.\design.\colors.$2\red[1:0] [0], B=1'0, Y=\mchip.design.VGA_Red [0]
      New connections: \mchip.design.VGA_Red [1] = \mchip.design.VGA_Red [0]
  Optimizing cells in module \toplevel_chip.
Performed a total of 10 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.20.6. Executing OPT_SHARE pass.

4.20.7. Executing OPT_DFF pass (perform DFF optimizations).

4.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~5 debug messages>

4.20.10. Rerunning OPT passes. (Maybe there is more to do..)

4.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.20.14. Executing OPT_SHARE pass.

4.20.15. Executing OPT_DFF pass (perform DFF optimizations).

4.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.20.18. Rerunning OPT passes. (Maybe there is more to do..)

4.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

4.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

4.20.22. Executing OPT_SHARE pass.

4.20.23. Executing OPT_DFF pass (perform DFF optimizations).

4.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

4.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

4.20.26. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper maccmap for cells of type $macc.
  add { $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [31] $flatten\mchip.\design.\colors.$sub$d10_jjalacce_connect4/src/verilogCHIP.v:1569$536_Y [5:1] $auto$rtlil.cc:2461:Not$3587 } * 3'111 (32x3 bits, unsigned)
  add { $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [30] $auto$wreduce.cc:461:run$2667 [2:0] } (31 bits, unsigned)
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_90_alu for cells of type $alu.
Using template $paramod$36fdbc18fab0758c8553dda57bd33e3f8f3e8765\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_90_alu for cells of type $alu.
Using template $paramod$57f63e8a3282e053be0430389b09fa050ac7dca0\_90_pmux for cells of type $pmux.
Using template $paramod$0563fff2c395e9892f21c131fa33d5e0ad144e72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using template $paramod$56f7ce6d87f8add68ca646dc02d7695a3189f8e5\_90_pmux for cells of type $pmux.
Using template $paramod$fb7f6c42d84fe8fae89a359df55310f1e494c563\_90_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_90_alu for cells of type $alu.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$d0e4c797aa680bb54c964a262954ce9f5bfee2c5\_90_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_90_alu for cells of type $alu.
Using template $paramod$d1615bf4e5e328245ffd1550e5fe105901cda77b\_90_alu for cells of type $alu.
Using template $paramod$78648aff6d035ceca1e51be5292d8e9748cdc2be\_90_alu for cells of type $alu.
Using template $paramod$8ffc13f158d9c4b92f6c17114e5b147ae5ead21a\_90_alu for cells of type $alu.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_90_alu for cells of type $alu.
Using template $paramod$ea139abf5d9f33c5a8f110be2ae0a1d01adc5fd6\_90_alu for cells of type $alu.
Using template $paramod$9c32b45917accb56be6667e7eba7742d064d7fbb\_90_alu for cells of type $alu.
Using template $paramod$c4905825bb8ecc38b98eb4167e8b007447af7884\_90_alu for cells of type $alu.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using template $paramod$150d098cb9cca1819459bc5073194c8c53d2862d\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$04f121e3c8858ac36578330193fd248b9a31e99c\_90_alu for cells of type $alu.
Using template $paramod$6b90a16b6f3b57b9c9d958838204f952a01dc262\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod$2d591d76303cd5065d50f216288bb81e81f2927d\_90_alu for cells of type $alu.
Using template $paramod$constmap:cc0946a8eef24d00be68a323bef197c57a32117a$paramod$3f776e85ba3052673a15d8a197e1965db77c6fae\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$a473f4770a4b60111e9e52de7ee27405c26ecd63\_90_alu for cells of type $alu.
Using template $paramod$0084fe719dfe5764ea498b16710fd7fd71f6c8a6\_90_alu for cells of type $alu.
Using template $paramod$33afdd83bf3811dac2de7a968d39eea5718691bc\_90_pmux for cells of type $pmux.
Using template $paramod$46064f572ac2aa4a964068601f62fbcb8348ada7\_90_alu for cells of type $alu.
Using template $paramod$99501223b6f7e5af250351eeb57edb5403a5ad0b\_90_alu for cells of type $alu.
Using template $paramod$constmap:3c2f4156f6125775657108ad2b52832d64b4e093$paramod$db90c216561dfd1101cca0672170ad9de21f99fe\_90_shift_shiftx for cells of type $shift.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'1
  Constant input on bit 1 of port A: 1'1
Creating constmapped module `$paramod$constmap:3b5d8a47dbf506cddf258f40577cf87b62c516bb$paramod$db90c216561dfd1101cca0672170ad9de21f99fe\_90_shift_shiftx'.

4.21.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:3b5d8a47dbf506cddf258f40577cf87b62c516bb$paramod$db90c216561dfd1101cca0672170ad9de21f99fe\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$6957.
    dead port 2/2 on $mux $procmux$6951.
    dead port 2/2 on $mux $procmux$6945.
    dead port 2/2 on $mux $procmux$6939.
    dead port 2/2 on $mux $procmux$6933.
    dead port 2/2 on $mux $procmux$6927.
    dead port 2/2 on $mux $procmux$6921.
    dead port 2/2 on $mux $procmux$6915.
Removed 8 multiplexer ports.
<suppressed ~1839 debug messages>

4.21.86. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:3b5d8a47dbf506cddf258f40577cf87b62c516bb$paramod$db90c216561dfd1101cca0672170ad9de21f99fe\_90_shift_shiftx.
<suppressed ~26 debug messages>
Removed 0 unused cells and 13 unused wires.
Using template $paramod$constmap:3b5d8a47dbf506cddf258f40577cf87b62c516bb$paramod$db90c216561dfd1101cca0672170ad9de21f99fe\_90_shift_shiftx for cells of type $shift.
Using template $paramod$8c43a4b340292425d0e15ee12ac6b01ca30bc5f3\_90_alu for cells of type $alu.
Using template $paramod$e44e91c5fe26938517b87dc00a8b3041c8cd06e0\_90_alu for cells of type $alu.
Using template $paramod$b51307e1ab724bf92e9e9974941ccd154031df99\_90_alu for cells of type $alu.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port B: 1'0
  Bit 9 of port B and bit 8 of port B are connected.
  Bit 10 of port B and bit 8 of port B are connected.
  Bit 11 of port B and bit 8 of port B are connected.
  Bit 12 of port B and bit 8 of port B are connected.
  Bit 13 of port B and bit 8 of port B are connected.
  Bit 14 of port B and bit 8 of port B are connected.
  Bit 15 of port B and bit 8 of port B are connected.
  Bit 16 of port B and bit 8 of port B are connected.
  Bit 17 of port B and bit 8 of port B are connected.
  Bit 18 of port B and bit 8 of port B are connected.
  Bit 19 of port B and bit 8 of port B are connected.
  Bit 20 of port B and bit 8 of port B are connected.
  Bit 21 of port B and bit 8 of port B are connected.
  Bit 22 of port B and bit 8 of port B are connected.
  Bit 23 of port B and bit 8 of port B are connected.
  Bit 24 of port B and bit 8 of port B are connected.
  Bit 25 of port B and bit 8 of port B are connected.
  Bit 26 of port B and bit 8 of port B are connected.
  Bit 27 of port B and bit 8 of port B are connected.
  Bit 28 of port B and bit 8 of port B are connected.
  Bit 29 of port B and bit 8 of port B are connected.
  Bit 30 of port B and bit 8 of port B are connected.
  Bit 31 of port B and bit 8 of port B are connected.
Creating constmapped module `$paramod$constmap:000993e25c40c0e9b19c4329aa8d4a9d9ec935e4$paramod$3f776e85ba3052673a15d8a197e1965db77c6fae\_90_shift_shiftx'.

4.21.93. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:000993e25c40c0e9b19c4329aa8d4a9d9ec935e4$paramod$3f776e85ba3052673a15d8a197e1965db77c6fae\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$5595.
    dead port 1/2 on $mux $procmux$5592.
    dead port 2/2 on $mux $procmux$5592.
    dead port 2/2 on $mux $procmux$5586.
    dead port 2/2 on $mux $procmux$5580.
    dead port 2/2 on $mux $procmux$5574.
    dead port 2/2 on $mux $procmux$5568.
    dead port 2/2 on $mux $procmux$5562.
    dead port 2/2 on $mux $procmux$5556.
    dead port 2/2 on $mux $procmux$5550.
Removed 10 multiplexer ports.
<suppressed ~125 debug messages>

4.21.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:000993e25c40c0e9b19c4329aa8d4a9d9ec935e4$paramod$3f776e85ba3052673a15d8a197e1965db77c6fae\_90_shift_shiftx.
<suppressed ~26 debug messages>
Removed 45 unused cells and 60 unused wires.
Using template $paramod$constmap:000993e25c40c0e9b19c4329aa8d4a9d9ec935e4$paramod$3f776e85ba3052673a15d8a197e1965db77c6fae\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$2367de27bb2b1d2c6cb39f0298c46e69f86b744b\_90_alu for cells of type $alu.
Using template $paramod$constmap:7e878be5346f6c5c1a7dcbfa7c72a40b38a6ebb5$paramod$a48304ff463b3ed70ba362de60d6e30ca43778be\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000011111 for cells of type $fa.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
No more expansions possible.
<suppressed ~7983 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~50141 debug messages>

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~14316 debug messages>
Removed a total of 4772 cells.

4.22.3. Executing OPT_DFF pass (perform DFF optimizations).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 13827 unused cells and 6492 unused wires.
<suppressed ~13828 debug messages>

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Replacing 560 occurrences of constant undef bits with constant zero bits
Extracted 8174 gates and 8360 wires to a netlist network with 183 inputs and 175 outputs.

4.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      904
ABC RESULTS:               NOT cells:      122
ABC RESULTS:             ORNOT cells:      687
ABC RESULTS:                OR cells:     2462
ABC RESULTS:              XNOR cells:       45
ABC RESULTS:               NOR cells:      138
ABC RESULTS:               AND cells:       89
ABC RESULTS:              NAND cells:      137
ABC RESULTS:            ANDNOT cells:     1973
ABC RESULTS:               XOR cells:      109
ABC RESULTS:        internal signals:     8002
ABC RESULTS:           input signals:      183
ABC RESULTS:          output signals:      175
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~5 debug messages>

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

4.24.3. Executing OPT_DFF pass (perform DFF optimizations).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 2267 unused wires.
<suppressed ~278 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

4.25.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

4.26. Printing statistics.

=== toplevel_chip ===

   Number of wires:               6992
   Number of wire bits:          10294
   Number of public wires:         427
   Number of public wire bits:    3623
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6835
     $_ANDNOT_                    1968
     $_AND_                         83
     $_DFF_P_                       28
     $_MUX_                        904
     $_NAND_                       133
     $_NOR_                        129
     $_NOT_                        122
     $_ORNOT_                      681
     $_OR_                        2457
     $_SDFFE_PP0P_                 117
     $_SDFFE_PP1P_                   1
     $_SDFF_PP0_                    45
     $_SDFF_PP1_                    18
     $_XNOR_                        45
     $_XOR_                        104

4.27. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing ASYNC2SYNC pass.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

8.1.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).

8.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

8.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

8.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.5. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

8.6. Executing OPT pass (performing simple optimizations).

8.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.6.6. Executing OPT_DFF pass (perform DFF optimizations).

8.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.6.9. Finished OPT passes. (There is nothing left to do.)

8.7. Executing FSM pass (extract and optimize FSM).

8.7.1. Executing FSM_DETECT pass (finding FSMs in design).

8.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.8. Executing OPT pass (performing simple optimizations).

8.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.8.9. Finished OPT passes. (There is nothing left to do.)

8.9. Executing WREDUCE pass (reducing word size of cells).

8.10. Executing PEEPOPT pass (run peephole optimizers).

8.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  created 0 $alu and 0 $macc cells.

8.13. Executing SHARE pass (SAT-based resource sharing).

8.14. Executing OPT pass (performing simple optimizations).

8.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.14.6. Executing OPT_DFF pass (perform DFF optimizations).

8.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.14.9. Finished OPT passes. (There is nothing left to do.)

8.15. Executing MEMORY pass.

8.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

8.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

8.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

8.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

8.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

8.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.17. Executing OPT pass (performing simple optimizations).

8.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.17.3. Executing OPT_DFF pass (perform DFF optimizations).

8.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.17.5. Finished fast OPT passes.

8.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.19. Executing OPT pass (performing simple optimizations).

8.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83255 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83253
        $abc$82495$auto$blifparse.cc:386:parse_blif$83254

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83258 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83256
        $abc$82495$auto$blifparse.cc:386:parse_blif$83257

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83263 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83261
        $abc$82495$auto$blifparse.cc:386:parse_blif$83262

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83266 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83264
        $abc$82495$auto$blifparse.cc:386:parse_blif$83265

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83273 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83271
        $abc$82495$auto$blifparse.cc:386:parse_blif$83272

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83276 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83274
        $abc$82495$auto$blifparse.cc:386:parse_blif$83275

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83280 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83278
        $abc$82495$auto$blifparse.cc:386:parse_blif$83279

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83283 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83281
        $abc$82495$auto$blifparse.cc:386:parse_blif$83282

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83290 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83288
        $abc$82495$auto$blifparse.cc:386:parse_blif$83289

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83293 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83291
        $abc$82495$auto$blifparse.cc:386:parse_blif$83292

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83297 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83295
        $abc$82495$auto$blifparse.cc:386:parse_blif$83296

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83300 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83298
        $abc$82495$auto$blifparse.cc:386:parse_blif$83299

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83305 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83303
        $abc$82495$auto$blifparse.cc:386:parse_blif$83304

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83308 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83306
        $abc$82495$auto$blifparse.cc:386:parse_blif$83307

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83312 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83310
        $abc$82495$auto$blifparse.cc:386:parse_blif$83311

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83315 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83313
        $abc$82495$auto$blifparse.cc:386:parse_blif$83314

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83325 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83322
        $abc$82495$auto$blifparse.cc:386:parse_blif$83324

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83330 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83327
        $abc$82495$auto$blifparse.cc:386:parse_blif$83329

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83336 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83333
        $abc$82495$auto$blifparse.cc:386:parse_blif$83335

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83341 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83338
        $abc$82495$auto$blifparse.cc:386:parse_blif$83340

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83348 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83345
        $abc$82495$auto$blifparse.cc:386:parse_blif$83347

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83353 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83350
        $abc$82495$auto$blifparse.cc:386:parse_blif$83352

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83359 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83356
        $abc$82495$auto$blifparse.cc:386:parse_blif$83358

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83364 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83361
        $abc$82495$auto$blifparse.cc:386:parse_blif$83363

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83372 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83369
        $abc$82495$auto$blifparse.cc:386:parse_blif$83371

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83377 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83374
        $abc$82495$auto$blifparse.cc:386:parse_blif$83376

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83383 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83380
        $abc$82495$auto$blifparse.cc:386:parse_blif$83382

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83388 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83385
        $abc$82495$auto$blifparse.cc:386:parse_blif$83387

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83395 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83392
        $abc$82495$auto$blifparse.cc:386:parse_blif$83394

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83400 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83397
        $abc$82495$auto$blifparse.cc:386:parse_blif$83399

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83406 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83403
        $abc$82495$auto$blifparse.cc:386:parse_blif$83405

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83411 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83408
        $abc$82495$auto$blifparse.cc:386:parse_blif$83410

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83420 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83418
        $abc$82495$auto$blifparse.cc:386:parse_blif$83419

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83423 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83421
        $abc$82495$auto$blifparse.cc:386:parse_blif$83422

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83427 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83425
        $abc$82495$auto$blifparse.cc:386:parse_blif$83426

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83430 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83428
        $abc$82495$auto$blifparse.cc:386:parse_blif$83429

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83435 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83433
        $abc$82495$auto$blifparse.cc:386:parse_blif$83434

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83442 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440
        $abc$82495$auto$blifparse.cc:386:parse_blif$83441

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83445 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83443
        $abc$82495$auto$blifparse.cc:386:parse_blif$83444

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83449 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83447
        $abc$82495$auto$blifparse.cc:386:parse_blif$83448

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83452 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83450
        $abc$82495$auto$blifparse.cc:386:parse_blif$83451

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83457 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83455
        $abc$82495$auto$blifparse.cc:386:parse_blif$83456

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83460 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83458
        $abc$82495$auto$blifparse.cc:386:parse_blif$83459

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83464 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83462
        $abc$82495$auto$blifparse.cc:386:parse_blif$83463

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83467 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83465
        $abc$82495$auto$blifparse.cc:386:parse_blif$83466

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83473 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83471
        $abc$82495$auto$blifparse.cc:386:parse_blif$83472

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83476 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83474
        $abc$82495$auto$blifparse.cc:386:parse_blif$83475

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83480 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83478
        $abc$82495$auto$blifparse.cc:386:parse_blif$83479

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83483 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83481
        $abc$82495$auto$blifparse.cc:386:parse_blif$83482

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83488 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83486
        $abc$82495$auto$blifparse.cc:386:parse_blif$83487

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83491 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83489
        $abc$82495$auto$blifparse.cc:386:parse_blif$83490

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83495 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83493
        $abc$82495$auto$blifparse.cc:386:parse_blif$83494

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83498 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83496
        $abc$82495$auto$blifparse.cc:386:parse_blif$83497

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83507 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83505
        $abc$82495$auto$blifparse.cc:386:parse_blif$83506

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83510 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83508
        $abc$82495$auto$blifparse.cc:386:parse_blif$83509

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83514 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83512
        $abc$82495$auto$blifparse.cc:386:parse_blif$83513

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83517 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83515
        $abc$82495$auto$blifparse.cc:386:parse_blif$83516

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83522 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83520
        $abc$82495$auto$blifparse.cc:386:parse_blif$83521

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83529 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527
        $abc$82495$auto$blifparse.cc:386:parse_blif$83528

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83532 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83530
        $abc$82495$auto$blifparse.cc:386:parse_blif$83531

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83536 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83534
        $abc$82495$auto$blifparse.cc:386:parse_blif$83535

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83539 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83537
        $abc$82495$auto$blifparse.cc:386:parse_blif$83538

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83544 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83542
        $abc$82495$auto$blifparse.cc:386:parse_blif$83543

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83547 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83545
        $abc$82495$auto$blifparse.cc:386:parse_blif$83546

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83551 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83549
        $abc$82495$auto$blifparse.cc:386:parse_blif$83550

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83554 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83552
        $abc$82495$auto$blifparse.cc:386:parse_blif$83553

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83560 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83558
        $abc$82495$auto$blifparse.cc:386:parse_blif$83559

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83563 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83561
        $abc$82495$auto$blifparse.cc:386:parse_blif$83562

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83567 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83565
        $abc$82495$auto$blifparse.cc:386:parse_blif$83566

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83570 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83568
        $abc$82495$auto$blifparse.cc:386:parse_blif$83569

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83575 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83573
        $abc$82495$auto$blifparse.cc:386:parse_blif$83574

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83578 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83576
        $abc$82495$auto$blifparse.cc:386:parse_blif$83577

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83582 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83580
        $abc$82495$auto$blifparse.cc:386:parse_blif$83581

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83585 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83583
        $abc$82495$auto$blifparse.cc:386:parse_blif$83584

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84545 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84542
        $abc$82495$auto$blifparse.cc:386:parse_blif$84544

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84549 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84547
        $abc$82495$auto$blifparse.cc:386:parse_blif$84548

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84554 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84552
        $abc$82495$auto$blifparse.cc:386:parse_blif$84553

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84557 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84555
        $abc$82495$auto$blifparse.cc:386:parse_blif$84556

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84563 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84561
        $abc$82495$auto$blifparse.cc:386:parse_blif$84562

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84566 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84564
        $abc$82495$auto$blifparse.cc:386:parse_blif$84565

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84570 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84568
        $abc$82495$auto$blifparse.cc:386:parse_blif$84569

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84573 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84571
        $abc$82495$auto$blifparse.cc:386:parse_blif$84572

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84581 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84579
        $abc$82495$auto$blifparse.cc:386:parse_blif$84580

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84584 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84582
        $abc$82495$auto$blifparse.cc:386:parse_blif$84583

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84588 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84586
        $abc$82495$auto$blifparse.cc:386:parse_blif$84587

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84591 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84589
        $abc$82495$auto$blifparse.cc:386:parse_blif$84590

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84596 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84594
        $abc$82495$auto$blifparse.cc:386:parse_blif$84595

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84599 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84597
        $abc$82495$auto$blifparse.cc:386:parse_blif$84598

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84603 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84601
        $abc$82495$auto$blifparse.cc:386:parse_blif$84602

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84606 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84604
        $abc$82495$auto$blifparse.cc:386:parse_blif$84605

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84616 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84614
        $abc$82495$auto$blifparse.cc:386:parse_blif$84615

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84619 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84617
        $abc$82495$auto$blifparse.cc:386:parse_blif$84618

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84623 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84621
        $abc$82495$auto$blifparse.cc:386:parse_blif$84622

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84626 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84624
        $abc$82495$auto$blifparse.cc:386:parse_blif$84625

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84631 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84629
        $abc$82495$auto$blifparse.cc:386:parse_blif$84630

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84641 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84639
        $abc$82495$auto$blifparse.cc:386:parse_blif$84640

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84644 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84642
        $abc$82495$auto$blifparse.cc:386:parse_blif$84643

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84648 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84646
        $abc$82495$auto$blifparse.cc:386:parse_blif$84647

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84651 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84649
        $abc$82495$auto$blifparse.cc:386:parse_blif$84650

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84656 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84654
        $abc$82495$auto$blifparse.cc:386:parse_blif$84655

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84659 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84657
        $abc$82495$auto$blifparse.cc:386:parse_blif$84658

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84663 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84661
        $abc$82495$auto$blifparse.cc:386:parse_blif$84662

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84666 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84664
        $abc$82495$auto$blifparse.cc:386:parse_blif$84665

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84672 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84670
        $abc$82495$auto$blifparse.cc:386:parse_blif$84671

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84675 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84673
        $abc$82495$auto$blifparse.cc:386:parse_blif$84674

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84679 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84677
        $abc$82495$auto$blifparse.cc:386:parse_blif$84678

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84682 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84680
        $abc$82495$auto$blifparse.cc:386:parse_blif$84681

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84687 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84685
        $abc$82495$auto$blifparse.cc:386:parse_blif$84686

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84690 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84688
        $abc$82495$auto$blifparse.cc:386:parse_blif$84689

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84694 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84692
        $abc$82495$auto$blifparse.cc:386:parse_blif$84693

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84697 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84695
        $abc$82495$auto$blifparse.cc:386:parse_blif$84696

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84704 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84702
        $abc$82495$auto$blifparse.cc:386:parse_blif$84703

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84707 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84705
        $abc$82495$auto$blifparse.cc:386:parse_blif$84706

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84711 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84709
        $abc$82495$auto$blifparse.cc:386:parse_blif$84710

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84714 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84712
        $abc$82495$auto$blifparse.cc:386:parse_blif$84713

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84719 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84717
        $abc$82495$auto$blifparse.cc:386:parse_blif$84718

8.19.7. Executing OPT_DFF pass (perform DFF optimizations).

8.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 232 unused wires.
<suppressed ~1 debug messages>

8.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~116 debug messages>

8.19.10. Rerunning OPT passes. (Maybe there is more to do..)

8.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~116 debug messages>

8.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83259 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83253
        $abc$82495$auto$blifparse.cc:386:parse_blif$83256

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83267 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83261
        $abc$82495$auto$blifparse.cc:386:parse_blif$83264

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83277 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83271
        $abc$82495$auto$blifparse.cc:386:parse_blif$83274

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83284 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83278
        $abc$82495$auto$blifparse.cc:386:parse_blif$83281

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83294 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83288
        $abc$82495$auto$blifparse.cc:386:parse_blif$83291

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83301 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83295
        $abc$82495$auto$blifparse.cc:386:parse_blif$83298

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83309 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83303
        $abc$82495$auto$blifparse.cc:386:parse_blif$83306

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83316 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83310
        $abc$82495$auto$blifparse.cc:386:parse_blif$83313

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83331 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83322
        $abc$82495$auto$blifparse.cc:386:parse_blif$83327

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83342 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83333
        $abc$82495$auto$blifparse.cc:386:parse_blif$83338

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83354 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83345
        $abc$82495$auto$blifparse.cc:386:parse_blif$83350

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83365 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83356
        $abc$82495$auto$blifparse.cc:386:parse_blif$83361

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83378 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83369
        $abc$82495$auto$blifparse.cc:386:parse_blif$83374

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83389 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83380
        $abc$82495$auto$blifparse.cc:386:parse_blif$83385

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83401 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83392
        $abc$82495$auto$blifparse.cc:386:parse_blif$83397

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83412 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83403
        $abc$82495$auto$blifparse.cc:386:parse_blif$83408

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83424 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83418
        $abc$82495$auto$blifparse.cc:386:parse_blif$83421

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83431 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83425
        $abc$82495$auto$blifparse.cc:386:parse_blif$83428

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83446 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440
        $abc$82495$auto$blifparse.cc:386:parse_blif$83443

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83453 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83447
        $abc$82495$auto$blifparse.cc:386:parse_blif$83450

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83461 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83455
        $abc$82495$auto$blifparse.cc:386:parse_blif$83458

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83468 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83462
        $abc$82495$auto$blifparse.cc:386:parse_blif$83465

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83477 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83471
        $abc$82495$auto$blifparse.cc:386:parse_blif$83474

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83484 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83478
        $abc$82495$auto$blifparse.cc:386:parse_blif$83481

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83492 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83486
        $abc$82495$auto$blifparse.cc:386:parse_blif$83489

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83499 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83493
        $abc$82495$auto$blifparse.cc:386:parse_blif$83496

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83511 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83505
        $abc$82495$auto$blifparse.cc:386:parse_blif$83508

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83518 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83512
        $abc$82495$auto$blifparse.cc:386:parse_blif$83515

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83533 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527
        $abc$82495$auto$blifparse.cc:386:parse_blif$83530

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83540 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83534
        $abc$82495$auto$blifparse.cc:386:parse_blif$83537

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83548 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83542
        $abc$82495$auto$blifparse.cc:386:parse_blif$83545

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83555 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83549
        $abc$82495$auto$blifparse.cc:386:parse_blif$83552

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83564 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83558
        $abc$82495$auto$blifparse.cc:386:parse_blif$83561

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83571 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83565
        $abc$82495$auto$blifparse.cc:386:parse_blif$83568

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83579 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83573
        $abc$82495$auto$blifparse.cc:386:parse_blif$83576

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83586 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83580
        $abc$82495$auto$blifparse.cc:386:parse_blif$83583

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84550 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84542
        $abc$82495$auto$blifparse.cc:386:parse_blif$84547

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84558 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84552
        $abc$82495$auto$blifparse.cc:386:parse_blif$84555

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84567 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84561
        $abc$82495$auto$blifparse.cc:386:parse_blif$84564

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84574 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84568
        $abc$82495$auto$blifparse.cc:386:parse_blif$84571

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84585 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84579
        $abc$82495$auto$blifparse.cc:386:parse_blif$84582

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84592 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84586
        $abc$82495$auto$blifparse.cc:386:parse_blif$84589

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84600 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84594
        $abc$82495$auto$blifparse.cc:386:parse_blif$84597

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84607 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84601
        $abc$82495$auto$blifparse.cc:386:parse_blif$84604

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84620 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84614
        $abc$82495$auto$blifparse.cc:386:parse_blif$84617

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84627 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84621
        $abc$82495$auto$blifparse.cc:386:parse_blif$84624

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84645 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84639
        $abc$82495$auto$blifparse.cc:386:parse_blif$84642

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84652 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84646
        $abc$82495$auto$blifparse.cc:386:parse_blif$84649

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84660 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84654
        $abc$82495$auto$blifparse.cc:386:parse_blif$84657

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84667 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84661
        $abc$82495$auto$blifparse.cc:386:parse_blif$84664

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84676 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84670
        $abc$82495$auto$blifparse.cc:386:parse_blif$84673

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84683 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84677
        $abc$82495$auto$blifparse.cc:386:parse_blif$84680

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84691 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84685
        $abc$82495$auto$blifparse.cc:386:parse_blif$84688

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84698 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84692
        $abc$82495$auto$blifparse.cc:386:parse_blif$84695

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84708 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84702
        $abc$82495$auto$blifparse.cc:386:parse_blif$84705

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84715 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84709
        $abc$82495$auto$blifparse.cc:386:parse_blif$84712

8.19.15. Executing OPT_DFF pass (perform DFF optimizations).

8.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 228 unused wires.
<suppressed ~1 debug messages>

8.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~56 debug messages>

8.19.18. Rerunning OPT passes. (Maybe there is more to do..)

8.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

8.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.22. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83268 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83253
        $abc$82495$auto$blifparse.cc:386:parse_blif$83261

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83285 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83271
        $abc$82495$auto$blifparse.cc:386:parse_blif$83278

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83302 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83288
        $abc$82495$auto$blifparse.cc:386:parse_blif$83295

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83317 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83303
        $abc$82495$auto$blifparse.cc:386:parse_blif$83310

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83343 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83322
        $abc$82495$auto$blifparse.cc:386:parse_blif$83333

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83366 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83345
        $abc$82495$auto$blifparse.cc:386:parse_blif$83356

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83390 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83369
        $abc$82495$auto$blifparse.cc:386:parse_blif$83380

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83413 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83392
        $abc$82495$auto$blifparse.cc:386:parse_blif$83403

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83432 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83418
        $abc$82495$auto$blifparse.cc:386:parse_blif$83425

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83454 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440
        $abc$82495$auto$blifparse.cc:386:parse_blif$83447

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83469 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83455
        $abc$82495$auto$blifparse.cc:386:parse_blif$83462

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83485 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83471
        $abc$82495$auto$blifparse.cc:386:parse_blif$83478

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83500 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83486
        $abc$82495$auto$blifparse.cc:386:parse_blif$83493

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83519 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83505
        $abc$82495$auto$blifparse.cc:386:parse_blif$83512

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83541 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527
        $abc$82495$auto$blifparse.cc:386:parse_blif$83534

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83556 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83542
        $abc$82495$auto$blifparse.cc:386:parse_blif$83549

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83572 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83558
        $abc$82495$auto$blifparse.cc:386:parse_blif$83565

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83587 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83573
        $abc$82495$auto$blifparse.cc:386:parse_blif$83580

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84559 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84542
        $abc$82495$auto$blifparse.cc:386:parse_blif$84552

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84575 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84561
        $abc$82495$auto$blifparse.cc:386:parse_blif$84568

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84593 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84579
        $abc$82495$auto$blifparse.cc:386:parse_blif$84586

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84608 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84594
        $abc$82495$auto$blifparse.cc:386:parse_blif$84601

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84628 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84614
        $abc$82495$auto$blifparse.cc:386:parse_blif$84621

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84653 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84639
        $abc$82495$auto$blifparse.cc:386:parse_blif$84646

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84668 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84654
        $abc$82495$auto$blifparse.cc:386:parse_blif$84661

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84684 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84670
        $abc$82495$auto$blifparse.cc:386:parse_blif$84677

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84699 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84685
        $abc$82495$auto$blifparse.cc:386:parse_blif$84692

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84716 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84702
        $abc$82495$auto$blifparse.cc:386:parse_blif$84709

8.19.23. Executing OPT_DFF pass (perform DFF optimizations).

8.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 112 unused wires.
<suppressed ~1 debug messages>

8.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~28 debug messages>

8.19.26. Rerunning OPT passes. (Maybe there is more to do..)

8.19.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

8.19.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.30. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83286 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83253
        $abc$82495$auto$blifparse.cc:386:parse_blif$83271

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83318 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83288
        $abc$82495$auto$blifparse.cc:386:parse_blif$83303

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83367 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83322
        $abc$82495$auto$blifparse.cc:386:parse_blif$83345

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83414 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83369
        $abc$82495$auto$blifparse.cc:386:parse_blif$83392

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83470 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440
        $abc$82495$auto$blifparse.cc:386:parse_blif$83455

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83501 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83471
        $abc$82495$auto$blifparse.cc:386:parse_blif$83486

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83557 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527
        $abc$82495$auto$blifparse.cc:386:parse_blif$83542

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83588 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83558
        $abc$82495$auto$blifparse.cc:386:parse_blif$83573

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84576 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84542
        $abc$82495$auto$blifparse.cc:386:parse_blif$84561

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84609 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84579
        $abc$82495$auto$blifparse.cc:386:parse_blif$84594

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84669 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84639
        $abc$82495$auto$blifparse.cc:386:parse_blif$84654

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84700 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84670
        $abc$82495$auto$blifparse.cc:386:parse_blif$84685

8.19.31. Executing OPT_DFF pass (perform DFF optimizations).

8.19.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 52 unused wires.
<suppressed ~1 debug messages>

8.19.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~12 debug messages>

8.19.34. Rerunning OPT passes. (Maybe there is more to do..)

8.19.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

8.19.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.38. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83319 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83253
        $abc$82495$auto$blifparse.cc:386:parse_blif$83288

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83415 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83322
        $abc$82495$auto$blifparse.cc:386:parse_blif$83369

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83502 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440
        $abc$82495$auto$blifparse.cc:386:parse_blif$83471

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83589 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527
        $abc$82495$auto$blifparse.cc:386:parse_blif$83558

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84610 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84542
        $abc$82495$auto$blifparse.cc:386:parse_blif$84579

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$84701 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$84639
        $abc$82495$auto$blifparse.cc:386:parse_blif$84670

8.19.39. Executing OPT_DFF pass (perform DFF optimizations).

8.19.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

8.19.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~6 debug messages>

8.19.42. Rerunning OPT passes. (Maybe there is more to do..)

8.19.43. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

8.19.44. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.46. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83503 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83439
        $abc$82495$auto$blifparse.cc:386:parse_blif$83440

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$82495$auto$blifparse.cc:386:parse_blif$83590 in front of them:
        $abc$82495$auto$blifparse.cc:386:parse_blif$83526
        $abc$82495$auto$blifparse.cc:386:parse_blif$83527

8.19.47. Executing OPT_DFF pass (perform DFF optimizations).

8.19.48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

8.19.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~2 debug messages>

8.19.50. Rerunning OPT passes. (Maybe there is more to do..)

8.19.51. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89274.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89274.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89277.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89277.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89280.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89280.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89283.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89283.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89286.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89286.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89289.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89289.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89292.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89292.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89295.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89295.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89337.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89337.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89340.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89340.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89343.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89343.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89346.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89346.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89349.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89349.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89352.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89352.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89355.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89355.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89358.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89358.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89565.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89565.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89568.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89568.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89571.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89571.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89574.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89574.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89595.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89595.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89598.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89598.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89601.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89601.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89604.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89604.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89706.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89706.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89709.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89709.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89721.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89721.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89724.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89724.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89775.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89775.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89781.
    dead port 2/2 on $mux $auto$opt_share.cc:244:merge_operators$89781.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89805.
    dead port 1/2 on $mux $auto$opt_share.cc:244:merge_operators$89808.
Removed 62 multiplexer ports.
<suppressed ~14 debug messages>

8.19.52. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.53. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.54. Executing OPT_SHARE pass.

8.19.55. Executing OPT_DFF pass (perform DFF optimizations).

8.19.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

8.19.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.19.58. Rerunning OPT passes. (Maybe there is more to do..)

8.19.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

8.19.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

8.19.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

8.19.62. Executing OPT_SHARE pass.

8.19.63. Executing OPT_DFF pass (perform DFF optimizations).

8.19.64. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

8.19.65. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.19.66. Finished OPT passes. (There is nothing left to do.)

8.20. Executing TECHMAP pass (map to technology primitives).

8.20.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~261 debug messages>

8.21. Executing OPT pass (performing simple optimizations).

8.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

8.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~150 debug messages>
Removed a total of 50 cells.

8.21.3. Executing OPT_DFF pass (perform DFF optimizations).

8.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 50 unused wires.
<suppressed ~1 debug messages>

8.21.5. Finished fast OPT passes.

8.22. Executing ABC pass (technology mapping using ABC).

8.22.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Extracted 6324 gates and 6507 wires to a netlist network with 183 inputs and 175 outputs.

8.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      843
ABC RESULTS:               NOT cells:      137
ABC RESULTS:             ORNOT cells:      699
ABC RESULTS:                OR cells:     2288
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               NOR cells:      126
ABC RESULTS:               AND cells:       70
ABC RESULTS:              NAND cells:       87
ABC RESULTS:            ANDNOT cells:     1790
ABC RESULTS:               XOR cells:       98
ABC RESULTS:        internal signals:     6149
ABC RESULTS:           input signals:      183
ABC RESULTS:          output signals:      175
Removing temp directory.

8.23. Executing OPT pass (performing simple optimizations).

8.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~6 debug messages>

8.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~144 debug messages>
Removed a total of 48 cells.

8.23.3. Executing OPT_DFF pass (perform DFF optimizations).

8.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 6556 unused wires.
<suppressed ~2 debug messages>

8.23.5. Finished fast OPT passes.

8.24. Executing HIERARCHY pass (managing design hierarchy).

8.24.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

8.24.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

8.25. Printing statistics.

=== toplevel_chip ===

   Number of wires:               6494
   Number of wire bits:           9796
   Number of public wires:         427
   Number of public wire bits:    3623
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6337
     $_ANDNOT_                    1787
     $_AND_                         69
     $_DFF_P_                       28
     $_MUX_                        808
     $_NAND_                        86
     $_NOR_                        126
     $_NOT_                        136
     $_ORNOT_                      696
     $_OR_                        2285
     $_SDFFE_PP0P_                 117
     $_SDFFE_PP1P_                   1
     $_SDFF_PP0_                    45
     $_SDFF_PP1_                    18
     $_XNOR_                        38
     $_XOR_                         97

8.26. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.
Renaming module \toplevel_chip to \d10_jjalacce_connect4.

9. Executing Verilog backend.

9.1. Executing BMUXMAP pass.

9.2. Executing DEMUXMAP pass.
Dumping module `\d10_jjalacce_connect4'.

10. Executing CHECK pass (checking for obvious problems).
Checking module d10_jjalacce_connect4...
Found and reported 0 problems.

11. Printing statistics.

=== d10_jjalacce_connect4 ===

   Number of wires:               6494
   Number of wire bits:           9796
   Number of public wires:         427
   Number of public wire bits:    3623
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6337
     $_ANDNOT_                    1787
     $_AND_                         69
     $_DFF_P_                       28
     $_MUX_                        808
     $_NAND_                        86
     $_NOR_                        126
     $_NOT_                        136
     $_ORNOT_                      696
     $_OR_                        2285
     $_SDFFE_PP0P_                 117
     $_SDFFE_PP1P_                   1
     $_SDFF_PP0_                    45
     $_SDFF_PP1_                    18
     $_XNOR_                        38
     $_XOR_                         97

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: bad51d17bd, CPU: user 5.64s system 0.28s
Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 31% 82x opt_expr (2 sec), 14% 57x opt_clean (0 sec), ...

