
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read_verilog -sv d19_gsavant_16bit_serial_cpu/src/types.vh d19_gsavant_16bit_serial_cpu/src/toplevel_chip.v d19_gsavant_16bit_serial_cpu/src/chip.sv d19_gsavant_16bit_serial_cpu/src/core.sv d19_gsavant_16bit_serial_cpu/src/reg_file.sv d19_gsavant_16bit_serial_cpu/src/control.sv d19_gsavant_16bit_serial_cpu/src/components.sv d19_gsavant_16bit_serial_cpu/src/alu.sv d19_gsavant_16bit_serial_cpu/src/decode.sv; synth -flatten -top toplevel_chip; setundef -undriven -zero; setundef -zero; async2sync; synth -top toplevel_chip; rename toplevel_chip d19_gsavant_16bit_serial_cpu; write_verilog -attr2comment d19_gsavant_16bit_serial_cpu/flattened.v; check; stat;' --

1. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/types.vh
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/types.vh' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/toplevel_chip.v
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/toplevel_chip.v' to AST representation.
Generating RTLIL representation for module `\toplevel_chip'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/chip.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/chip.sv' to AST representation.
Generating RTLIL representation for module `\my_chip'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/core.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/core.sv' to AST representation.
Generating RTLIL representation for module `\cpu_core'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/reg_file.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/reg_file.sv' to AST representation.
Generating RTLIL representation for module `\reg_file'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/control.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/control.sv' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/components.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/components.sv' to AST representation.
Generating RTLIL representation for module `\instr_shift_register'.
Generating RTLIL representation for module `\pc_shift_reg'.
Generating RTLIL representation for module `\eight_bit_spispo'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/alu.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/alu.sv' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: d19_gsavant_16bit_serial_cpu/src/decode.sv
Parsing SystemVerilog input from `d19_gsavant_16bit_serial_cpu/src/decode.sv' to AST representation.
Generating RTLIL representation for module `\instruction_decode'.
Successfully finished Verilog frontend.

10. Executing SYNTH pass.

10.1. Executing HIERARCHY pass (managing design hierarchy).

10.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \cpu_core
Used module:             \eight_bit_spispo
Used module:             \pc_shift_reg
Used module:             \alu
Used module:             \instr_shift_register
Used module:             \reg_file
Used module:             \instruction_decode
Used module:             \control

10.1.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \cpu_core
Used module:             \eight_bit_spispo
Used module:             \pc_shift_reg
Used module:             \alu
Used module:             \instr_shift_register
Used module:             \reg_file
Used module:             \instruction_decode
Used module:             \control
Removed 0 unused modules.

10.2. Executing PROC pass (convert processes to netlists).

10.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/decode.sv:0$150 in module instruction_decode.
Marked 4 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136 in module eight_bit_spispo.
Marked 3 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128 in module pc_shift_reg.
Marked 3 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118 in module instr_shift_register.
Marked 1 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/control.sv:139$104 in module control.
Marked 9 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86 in module control.
Marked 2 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60 in module reg_file.
Marked 2 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55 in module reg_file.
Marked 5 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2 in module cpu_core.
Marked 1 switch rules as full_case in process $proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$1 in module cpu_core.
Removed a total of 0 dead cases.

10.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 33 assignments to connections.

10.2.4. Executing PROC_INIT pass (extract init attributes).

10.2.5. Executing PROC_ARST pass (detect async resets in processes).

10.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~34 debug messages>

10.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\instruction_decode.$proc$d19_gsavant_16bit_serial_cpu/src/decode.sv:0$150'.
     1/13: $3\signals[40:26] [14:12]
     2/13: $1\signals[9:0] [7:4]
     3/13: $3\signals[40:26] [5]
     4/13: $3\signals[40:26] [11:9]
     5/13: $1\signals[9:0] [9]
     6/13: $3\signals[40:26] [4]
     7/13: $1\signals[9:0] [0]
     8/13: $1\signals[9:0] [8]
     9/13: $1\signals[9:0] [3:1]
    10/13: $3\signals[40:26] [8:6]
    11/13: $4\signals[30:30]
    12/13: $2\signals[22:19]
    13/13: $3\signals[40:26] [3:0]
Creating decoders for process `\alu.$proc$d19_gsavant_16bit_serial_cpu/src/alu.sv:0$138'.
     1/1: $1\result[15:0]
Creating decoders for process `\eight_bit_spispo.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136'.
     1/2: $0\low_b[0:0]
     2/2: $0\prll_out[15:0]
Creating decoders for process `\pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
     1/3: $0\low_b[0:0]
     2/3: $0\prll_out[15:0]
     3/3: $0\error[0:0]
Creating decoders for process `\instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
     1/3: $0\count[4:0]
     2/3: $0\instruction[15:0]
     3/3: $0\imm[15:0]
Creating decoders for process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:139$104'.
     1/1: $0\cs[4:0]
Creating decoders for process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
     1/30: $3\ctrl[9:4] [5]
     2/30: $8\ctrl[9:8] [1]
     3/30: $8\ctrl[9:8] [0]
     4/30: $3\ctrl[9:4] [3]
     5/30: $8\ns[4:0]
     6/30: $3\ctrl[9:4] [2]
     7/30: $2\ctrl[2:0] [2:1]
     8/30: $7\ns[4:0]
     9/30: $7\ctrl[8:8]
    10/30: $9\ns[4:0]
    11/30: $3\bus_mar[0:0]
    12/30: $5\ns[4:0]
    13/30: $5\ctrl[6:6]
    14/30: $2\bus_mar[0:0]
    15/30: $4\ns[4:0]
    16/30: $2\ctrl[2:0] [0]
    17/30: $6\ns[4:0]
    18/30: $3\ctrl[9:4] [1]
    19/30: $3\ctrl[9:4] [0]
    20/30: $4\ctrl[2:1] [0]
    21/30: $2\ns[4:0]
    22/30: $1\ns[4:0]
    23/30: $3\ns[4:0]
    24/30: $4\ctrl[2:1] [1]
    25/30: $6\ctrl[6:6]
    26/30: $3\ctrl[9:4] [4]
    27/30: $1\bus_mdr[0:0]
    28/30: $1\bus_mar[0:0]
    29/30: $1\bus_pc[0:0]
    30/30: $0\error[0:0]
Creating decoders for process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
     1/14: $2$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$85
     2/14: $2$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_DATA[15:0]$84
     3/14: $2$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_ADDR[2:0]$83
     4/14: $1$fordecl_block$45.i[31:0]$72
     5/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$79
     6/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$78
     7/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$77
     8/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$76
     9/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$75
    10/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$74
    11/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$73
    12/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$82
    13/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_DATA[15:0]$81
    14/14: $1$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_ADDR[2:0]$80
Creating decoders for process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55'.
     1/2: $1\rs2_data[15:0]
     2/2: $1\rs1_data[15:0]
Creating decoders for process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
     1/10: $2\pc_in[15:0]
     2/10: $1\pc_in[15:0]
     3/10: $3\alu_input2[15:0]
     4/10: $3\alu_input1[15:0]
     5/10: $2\rd_data[15:0]
     6/10: $2\alu_input2[15:0]
     7/10: $2\alu_input1[15:0]
     8/10: $1\rd_data[15:0]
     9/10: $1\alu_input2[15:0]
    10/10: $1\alu_input1[15:0]
Creating decoders for process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$1'.
     1/1: $1\out_bus[7:0]

10.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\instruction_decode.\signals' from process `\instruction_decode.$proc$d19_gsavant_16bit_serial_cpu/src/decode.sv:0$150'.
No latch inferred for signal `\alu.\result' from process `\alu.$proc$d19_gsavant_16bit_serial_cpu/src/alu.sv:0$138'.
No latch inferred for signal `\control.\bus_pc' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\bus_mar' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\bus_mdr' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\ctrl [2:0]' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\ctrl [9:4]' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\error' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\control.\ns' from process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
No latch inferred for signal `\reg_file.\rs1_data' from process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55'.
No latch inferred for signal `\reg_file.\rs2_data' from process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55'.
No latch inferred for signal `\cpu_core.\alu_input1' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\alu_input2' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\mdr_in' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\mar_in' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\pc_in' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\rd_data' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\reg_we' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
No latch inferred for signal `\cpu_core.\out_bus' from process `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$1'.

10.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\eight_bit_spispo.\prll_out' using process `\eight_bit_spispo.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136'.
  created $dff cell `$procdff$860' with positive edge clock.
Creating register for signal `\eight_bit_spispo.\low_b' using process `\eight_bit_spispo.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136'.
  created $dff cell `$procdff$861' with positive edge clock.
Creating register for signal `\pc_shift_reg.\error' using process `\pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
  created $dff cell `$procdff$862' with positive edge clock.
Creating register for signal `\pc_shift_reg.\prll_out' using process `\pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
  created $dff cell `$procdff$863' with positive edge clock.
Creating register for signal `\pc_shift_reg.\low_b' using process `\pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
  created $dff cell `$procdff$864' with positive edge clock.
Creating register for signal `\instr_shift_register.\imm' using process `\instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
  created $dff cell `$procdff$865' with positive edge clock.
Creating register for signal `\instr_shift_register.\instruction' using process `\instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
  created $dff cell `$procdff$866' with positive edge clock.
Creating register for signal `\instr_shift_register.\count' using process `\instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
  created $dff cell `$procdff$867' with positive edge clock.
Creating register for signal `\control.\cs' using process `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:139$104'.
  created $dff cell `$procdff$868' with positive edge clock.
Creating register for signal `\reg_file.$fordecl_block$45.i' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$869' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$870' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$871' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$872' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$873' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$874' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$875' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$876' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_ADDR' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$877' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_DATA' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$878' with positive edge clock.
Creating register for signal `\reg_file.$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN' using process `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
  created $dff cell `$procdff$879' with positive edge clock.

10.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

10.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\instruction_decode.$proc$d19_gsavant_16bit_serial_cpu/src/decode.sv:0$150'.
Removing empty process `instruction_decode.$proc$d19_gsavant_16bit_serial_cpu/src/decode.sv:0$150'.
Found and cleaned up 1 empty switch in `\alu.$proc$d19_gsavant_16bit_serial_cpu/src/alu.sv:0$138'.
Removing empty process `alu.$proc$d19_gsavant_16bit_serial_cpu/src/alu.sv:0$138'.
Found and cleaned up 4 empty switches in `\eight_bit_spispo.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136'.
Removing empty process `eight_bit_spispo.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:100$136'.
Found and cleaned up 3 empty switches in `\pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
Removing empty process `pc_shift_reg.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:66$128'.
Found and cleaned up 4 empty switches in `\instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
Removing empty process `instr_shift_register.$proc$d19_gsavant_16bit_serial_cpu/src/components.sv:32$118'.
Found and cleaned up 1 empty switch in `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:139$104'.
Removing empty process `control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:139$104'.
Found and cleaned up 9 empty switches in `\control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
Removing empty process `control.$proc$d19_gsavant_16bit_serial_cpu/src/control.sv:0$86'.
Found and cleaned up 2 empty switches in `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
Removing empty process `reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:26$60'.
Found and cleaned up 2 empty switches in `\reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55'.
Removing empty process `reg_file.$proc$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:0$55'.
Found and cleaned up 5 empty switches in `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
Removing empty process `cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$2'.
Found and cleaned up 1 empty switch in `\cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$1'.
Removing empty process `cpu_core.$proc$d19_gsavant_16bit_serial_cpu/src/core.sv:0$1'.
Cleaned up 34 empty switches.

10.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module instruction_decode.
<suppressed ~6 debug messages>
Optimizing module alu.
<suppressed ~4 debug messages>
Optimizing module eight_bit_spispo.
Optimizing module pc_shift_reg.
Optimizing module instr_shift_register.
Optimizing module control.
<suppressed ~8 debug messages>
Optimizing module reg_file.
<suppressed ~2 debug messages>
Optimizing module cpu_core.
<suppressed ~2 debug messages>
Optimizing module my_chip.
Optimizing module toplevel_chip.

10.3. Executing FLATTEN pass (flatten design).
Deleting now unused module instruction_decode.
Deleting now unused module alu.
Deleting now unused module eight_bit_spispo.
Deleting now unused module pc_shift_reg.
Deleting now unused module instr_shift_register.
Deleting now unused module control.
Deleting now unused module reg_file.
Deleting now unused module cpu_core.
Deleting now unused module my_chip.
<suppressed ~10 debug messages>

10.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~6 debug messages>

10.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 49 unused cells and 268 unused wires.
<suppressed ~53 debug messages>

10.6. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

10.7. Executing OPT pass (performing simple optimizations).

10.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~273 debug messages>
Removed a total of 91 cells.

10.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$359.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$402.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$417.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$435.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$437.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$455.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$457.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$474.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$491.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$800.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$508.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$539.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$576.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$596.
    dead port 1/2 on $mux $flatten\mchip.\cpu.$procmux$813.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$815.
    dead port 1/2 on $mux $flatten\mchip.\cpu.$procmux$821.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$823.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$829.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$630.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$650.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$668.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\ctrl_fsm.$procmux$670.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$835.
    dead port 2/2 on $mux $flatten\mchip.\cpu.$procmux$841.
    dead port 2/2 on $mux $flatten\mchip.\cpu.\dec_instr.$procmux$222.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\rf.$procmux$736.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\rf.$procmux$742.
    dead port 1/2 on $mux $flatten\mchip.\cpu.\rf.$procmux$748.
Removed 29 multiplexer ports.
<suppressed ~43 debug messages>

10.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.$procmux$803: { $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$801_CMP $auto$opt_reduce.cc:134:opt_pmux$889 }
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$548: $auto$opt_reduce.cc:134:opt_pmux$891
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$555: $auto$opt_reduce.cc:134:opt_pmux$893
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$687: $auto$opt_reduce.cc:134:opt_pmux$895
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$709: $auto$opt_reduce.cc:134:opt_pmux$897
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\dec_instr.$procmux$158: $auto$opt_reduce.cc:134:opt_pmux$899
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\dec_instr.$procmux$168: $auto$opt_reduce.cc:134:opt_pmux$901
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.$procmux$852: $flatten\mchip.\cpu.$procmux$807_CMP
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\dec_instr.$procmux$178: $auto$opt_reduce.cc:134:opt_pmux$903
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\dec_instr.$procmux$191: { $auto$opt_reduce.cc:134:opt_pmux$905 $flatten\mchip.\cpu.$procmux$804_CMP }
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\dec_instr.$procmux$212: $auto$opt_reduce.cc:134:opt_pmux$907
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$733:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$procmux$733_Y
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$procmux$733_Y [0]
      New connections: $flatten\mchip.\cpu.\rf.$procmux$733_Y [15:1] = { $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] $flatten\mchip.\cpu.\rf.$procmux$733_Y [0] }
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$350: $auto$opt_reduce.cc:134:opt_pmux$909
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$754:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$53_EN[15:0]$68 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$757:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$52_EN[15:0]$67 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$760:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$51_EN[15:0]$66 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$763:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$50_EN[15:0]$65 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$766:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$49_EN[15:0]$64 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$769:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$48_EN[15:0]$63 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$772:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62
      New ports: A=1'0, B=1'1, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:29$47_EN[15:0]$62 [0] }
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\rf.$procmux$775:
      Old ports: A=$flatten\mchip.\cpu.\rf.$2$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$85, B=16'0000000000000000, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71
      New ports: A=$flatten\mchip.\cpu.\rf.$procmux$733_Y [0], B=1'0, Y=$flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0]
      New connections: $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [15:1] = { $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] $flatten\mchip.\cpu.\rf.$0$memwr$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:32$54_EN[15:0]$71 [0] }
  Optimizing cells in module \toplevel_chip.
Performed a total of 24 changes.

10.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

10.7.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 140 unused wires.
<suppressed ~7 debug messages>

10.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.7.9. Rerunning OPT passes. (Maybe there is more to do..)

10.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

10.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.7.13. Executing OPT_DFF pass (perform DFF optimizations).

10.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.7.16. Finished OPT passes. (There is nothing left to do.)

10.8. Executing FSM pass (extract and optimize FSM).

10.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register toplevel_chip.mchip.cpu.ctrl_fsm.cs.

10.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\mchip.cpu.ctrl_fsm.cs' from module `\toplevel_chip'.
  found $dff cell for state register: $flatten\mchip.\cpu.\ctrl_fsm.$procdff$868
  root of input selection tree: $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0]
  found reset state: 5'10000 (guessed from mux tree)
  found ctrl input: \io_in [13]
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$600_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$418_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$360_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$556_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$557_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$403_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$550_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$540_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$352_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$374_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$375_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$611_CMP
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$392_CMP
  found state code: 5'10000
  found state code: 5'01111
  found ctrl input: \mchip.cpu.instr_shift.valid
  found state code: 5'01110
  found ctrl input: \mchip.cpu.ctrl_fsm.halt
  found state code: 5'00000
  found ctrl input: \io_in [9]
  found state code: 5'01001
  found state code: 5'01101
  found ctrl input: \io_in [8]
  found state code: 5'01100
  found state code: 5'01011
  found state code: 5'01000
  found state code: 5'01010
  found state code: 5'00100
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:65$94_Y
  found ctrl input: $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:69$101_Y
  found state code: 5'00110
  found state code: 5'00011
  found state code: 5'00111
  found state code: 5'00101
  found ctrl input: $flatten\mchip.\cpu.$procmux$804_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$611_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$600_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$557_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$556_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$550_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$549_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$540_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$418_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$403_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$392_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$375_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$374_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$360_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$352_CMP
  found ctrl output: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$351_CMP
  ctrl inputs: { \mchip.cpu.instr_shift.valid \mchip.cpu.ctrl_fsm.halt $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:65$94_Y $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:69$101_Y $flatten\mchip.\cpu.$procmux$804_CMP \io_in [13] \io_in [9:8] }
  ctrl outputs: { $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] $flatten\mchip.\cpu.\ctrl_fsm.$procmux$351_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$352_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$360_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$374_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$375_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$392_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$403_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$418_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$540_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$549_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$550_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$556_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$557_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$600_CMP $flatten\mchip.\cpu.\ctrl_fsm.$procmux$611_CMP }
  transition:    5'00000 8'----00-- ->    5'10000 20'10000000001000000000
  transition:    5'00000 8'----10-- ->    5'00111 20'00111000001000000000
  transition:    5'00000 8'-----1-- ->    5'10000 20'10000000001000000000
  transition:    5'10000 8'-----0-0 ->    5'10000 20'10000000000100000000
  transition:    5'10000 8'-----0-1 ->    5'01100 20'01100000000100000000
  transition:    5'10000 8'-----1-- ->    5'10000 20'10000000000100000000
  transition:    5'01000 8'-----00- ->    5'01000 20'01000000000001000000
  transition:    5'01000 8'-----01- ->    5'01010 20'01010000000001000000
  transition:    5'01000 8'-----1-- ->    5'10000 20'10000000000001000000
  transition:    5'00100 8'-----0-- ->    5'10000 20'10000100000000000000
  transition:    5'00100 8'-----1-- ->    5'10000 20'10000100000000000000
  transition:    5'01100 8'-----0-- ->    5'01101 20'01101000000000000100
  transition:    5'01100 8'-----1-- ->    5'10000 20'10000000000000000100
  transition:    5'01010 8'-----0-- ->    5'01011 20'01011000000000010000
  transition:    5'01010 8'-----1-- ->    5'10000 20'10000000000000010000
  transition:    5'00110 8'--00-0-- ->    5'00110 20'00110000100000000000
  transition:    5'00110 8'--01-0-- ->    5'00011 20'00011000100000000000
  transition:    5'00110 8'--1--0-- ->    5'01000 20'01000000100000000000
  transition:    5'00110 8'-----1-- ->    5'10000 20'10000000100000000000
  transition:    5'01110 8'0----0-- ->    5'01110 20'01110000000010000000
  transition:    5'01110 8'10---0-- ->    5'00000 20'00000000000010000000
  transition:    5'01110 8'11---0-- ->    5'01111 20'01111000000010000000
  transition:    5'01110 8'-----1-- ->    5'10000 20'10000000000010000000
  transition:    5'01001 8'-----00- ->    5'10000 20'10000001000000000000
  transition:    5'01001 8'-----01- ->    5'01110 20'01110001000000000000
  transition:    5'01001 8'-----1-- ->    5'10000 20'10000001000000000000
  transition:    5'00101 8'-----0-- ->    5'00110 20'00110000010000000000
  transition:    5'00101 8'-----1-- ->    5'10000 20'10000000010000000000
  transition:    5'01101 8'-----0-- ->    5'01001 20'01001000000000001000
  transition:    5'01101 8'-----1-- ->    5'10000 20'10000000000000001000
  transition:    5'00011 8'-----0-- ->    5'00100 20'00100010000000000000
  transition:    5'00011 8'-----1-- ->    5'10000 20'10000010000000000000
  transition:    5'01011 8'-----0-- ->    5'10000 20'10000000000000100000
  transition:    5'01011 8'-----1-- ->    5'10000 20'10000000000000100000
  transition:    5'00111 8'-----0-0 ->    5'00111 20'00111000000000000001
  transition:    5'00111 8'-----0-1 ->    5'00101 20'00101000000000000001
  transition:    5'00111 8'-----1-- ->    5'10000 20'10000000000000000001
  transition:    5'01111 8'-----0-- ->    5'01111 20'01111000000000000010
  transition:    5'01111 8'-----1-- ->    5'10000 20'10000000000000000010

10.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mchip.cpu.ctrl_fsm.cs$910' from module `\toplevel_chip'.
  Merging pattern 8'-----0-- and 8'-----1-- from group (3 1 20'10000100000000000000).
  Merging pattern 8'-----1-- and 8'-----0-- from group (3 1 20'10000100000000000000).
  Merging pattern 8'-----0-- and 8'-----1-- from group (12 1 20'10000000000000100000).
  Merging pattern 8'-----1-- and 8'-----0-- from group (12 1 20'10000000000000100000).

10.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 27 unused cells and 27 unused wires.
<suppressed ~29 debug messages>

10.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mchip.cpu.ctrl_fsm.cs$910' from module `\toplevel_chip'.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$611_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$600_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$540_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$418_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$403_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$procmux$360_CMP.
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] [0].
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] [1].
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] [2].
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] [3].
  Removing unused output signal $flatten\mchip.\cpu.\ctrl_fsm.$0\cs[4:0] [4].

10.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\mchip.cpu.ctrl_fsm.cs$910' from module `\toplevel_chip' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000 -> -------------1-
  10000 -> --------------1
  01000 -> ------------1--
  00100 -> -----------1---
  01100 -> ----------1----
  01010 -> ---------1-----
  00110 -> --------1------
  01110 -> -------1-------
  01001 -> ------1--------
  00101 -> -----1---------
  01101 -> ----1----------
  00011 -> ---1-----------
  01011 -> --1------------
  00111 -> -1-------------
  01111 -> 1--------------

10.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\mchip.cpu.ctrl_fsm.cs$910' from module `toplevel_chip':
-------------------------------------

  Information on FSM $fsm$\mchip.cpu.ctrl_fsm.cs$910 (\mchip.cpu.ctrl_fsm.cs):

  Number of input signals:    8
  Number of output signals:   9
  Number of state bits:      15

  Input signals:
    0: \io_in [8]
    1: \io_in [9]
    2: \io_in [13]
    3: $flatten\mchip.\cpu.$procmux$804_CMP
    4: $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:69$101_Y
    5: $flatten\mchip.\cpu.\ctrl_fsm.$and$d19_gsavant_16bit_serial_cpu/src/control.sv:65$94_Y
    6: \mchip.cpu.ctrl_fsm.halt
    7: \mchip.cpu.instr_shift.valid

  Output signals:
    0: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$557_CMP
    1: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$556_CMP
    2: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$550_CMP
    3: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$549_CMP
    4: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$392_CMP
    5: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$375_CMP
    6: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$374_CMP
    7: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$352_CMP
    8: $flatten\mchip.\cpu.\ctrl_fsm.$procmux$351_CMP

  State encoding:
    0: 15'-------------1-
    1: 15'--------------1  <RESET STATE>
    2: 15'------------1--
    3: 15'-----------1---
    4: 15'----------1----
    5: 15'---------1-----
    6: 15'--------1------
    7: 15'-------1-------
    8: 15'------1--------
    9: 15'-----1---------
   10: 15'----1----------
   11: 15'---1-----------
   12: 15'--1------------
   13: 15'-1-------------
   14: 15'1--------------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 8'----00--   ->     1 9'000010000
      1:     0 8'-----1--   ->     1 9'000010000
      2:     0 8'----10--   ->    13 9'000010000
      3:     1 8'-----0-0   ->     1 9'000000000
      4:     1 8'-----1--   ->     1 9'000000000
      5:     1 8'-----0-1   ->     4 9'000000000
      6:     2 8'-----1--   ->     1 9'000000000
      7:     2 8'-----00-   ->     2 9'000000000
      8:     2 8'-----01-   ->     5 9'000000000
      9:     3 8'--------   ->     1 9'100000000
     10:     4 8'-----1--   ->     1 9'000000001
     11:     4 8'-----0--   ->    10 9'000000001
     12:     5 8'-----1--   ->     1 9'000000100
     13:     5 8'-----0--   ->    12 9'000000100
     14:     6 8'-----1--   ->     1 9'001000000
     15:     6 8'--1--0--   ->     2 9'001000000
     16:     6 8'--00-0--   ->     6 9'001000000
     17:     6 8'--01-0--   ->    11 9'001000000
     18:     7 8'10---0--   ->     0 9'000000000
     19:     7 8'-----1--   ->     1 9'000000000
     20:     7 8'0----0--   ->     7 9'000000000
     21:     7 8'11---0--   ->    14 9'000000000
     22:     8 8'-----00-   ->     1 9'000000000
     23:     8 8'-----1--   ->     1 9'000000000
     24:     8 8'-----01-   ->     7 9'000000000
     25:     9 8'-----1--   ->     1 9'000100000
     26:     9 8'-----0--   ->     6 9'000100000
     27:    10 8'-----1--   ->     1 9'000000010
     28:    10 8'-----0--   ->     8 9'000000010
     29:    11 8'-----1--   ->     1 9'010000000
     30:    11 8'-----0--   ->     3 9'010000000
     31:    12 8'--------   ->     1 9'000001000
     32:    13 8'-----1--   ->     1 9'000000000
     33:    13 8'-----0-1   ->     9 9'000000000
     34:    13 8'-----0-0   ->    13 9'000000000
     35:    14 8'-----1--   ->     1 9'000000000
     36:    14 8'-----0--   ->    14 9'000000000

-------------------------------------

10.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\mchip.cpu.ctrl_fsm.cs$910' from module `\toplevel_chip'.

10.9. Executing OPT pass (performing simple optimizations).

10.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~14 debug messages>

10.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

10.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

10.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\mchip.\cpu.\pc_reg.$procdff$864 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\pc_reg.$procmux$271_Y, Q = \mchip.cpu.pc_reg.low_b, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1027 ($sdff) from module toplevel_chip (D = $flatten\mchip.\cpu.\pc_reg.$not$d19_gsavant_16bit_serial_cpu/src/components.sv:75$129_Y, Q = \mchip.cpu.pc_reg.low_b).
Adding SRST signal on $flatten\mchip.\cpu.\pc_reg.$procdff$863 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\pc_reg.$procmux$279_Y, Q = \mchip.cpu.pc_reg.prll_out, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1033 ($sdff) from module toplevel_chip (D = \mchip.cpu.pc_reg.prll_in, Q = \mchip.cpu.pc_reg.prll_out).
Adding SRST signal on $flatten\mchip.\cpu.\mdr_shift_reg.$procdff$861 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mdr_shift_reg.$procmux$251_Y, Q = \mchip.cpu.mdr_shift_reg.low_b, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1035 ($sdff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mdr_shift_reg.$not$d19_gsavant_16bit_serial_cpu/src/components.sv:110$137_Y, Q = \mchip.cpu.mdr_shift_reg.low_b).
Adding SRST signal on $flatten\mchip.\cpu.\mdr_shift_reg.$procdff$860 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mdr_shift_reg.$procmux$262_Y, Q = \mchip.cpu.mdr_shift_reg.prll_out, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1043 ($sdff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mdr_shift_reg.$procmux$262_Y, Q = \mchip.cpu.mdr_shift_reg.prll_out).
Adding SRST signal on $flatten\mchip.\cpu.\mar_shift_reg.$procdff$861 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mar_shift_reg.$procmux$251_Y, Q = \mchip.cpu.mar_shift_reg.low_b, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1047 ($sdff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mar_shift_reg.$not$d19_gsavant_16bit_serial_cpu/src/components.sv:110$137_Y, Q = \mchip.cpu.mar_shift_reg.low_b).
Adding SRST signal on $flatten\mchip.\cpu.\mar_shift_reg.$procdff$860 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\mar_shift_reg.$procmux$262_Y, Q = \mchip.cpu.mar_shift_reg.prll_out, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1053 ($sdff) from module toplevel_chip (D = \mchip.cpu.alu_result, Q = \mchip.cpu.mar_shift_reg.prll_out).
Adding SRST signal on $flatten\mchip.\cpu.\instr_shift.$procdff$867 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119_Y [4:0], Q = \mchip.cpu.instr_shift.count, rval = 5'00000).
Adding SRST signal on $flatten\mchip.\cpu.\instr_shift.$procdff$866 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\instr_shift.$procmux$302_Y, Q = \mchip.cpu.instr_shift.instruction, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1060 ($sdff) from module toplevel_chip (D = { \io_in [7:0] \mchip.cpu.instr_shift.instruction [15:8] }, Q = \mchip.cpu.instr_shift.instruction).
Adding SRST signal on $flatten\mchip.\cpu.\instr_shift.$procdff$865 ($dff) from module toplevel_chip (D = $flatten\mchip.\cpu.\instr_shift.$procmux$313_Y, Q = \mchip.cpu.instr_shift.imm, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1066 ($sdff) from module toplevel_chip (D = { \io_in [7:0] \mchip.cpu.instr_shift.imm [15:8] }, Q = \mchip.cpu.instr_shift.imm).

10.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 24 unused cells and 52 unused wires.
<suppressed ~25 debug messages>

10.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1 debug messages>

10.9.9. Rerunning OPT passes. (Maybe there is more to do..)

10.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

10.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.9.13. Executing OPT_DFF pass (perform DFF optimizations).

10.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.9.16. Finished OPT passes. (There is nothing left to do.)

10.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$880 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$881 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$882 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$883 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$884 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$885 (mchip.cpu.rf.reg_file).
Removed top 29 address bits (of 32) from memory init port toplevel_chip.$flatten\mchip.\cpu.\rf.$auto$proc_memwr.cc:45:proc_memwr$886 (mchip.cpu.rf.reg_file).
Removed top 1 bits (of 2) from port B of cell toplevel_chip.$auto$fsm_map.cc:77:implement_pattern_cache$981 ($eq).
Removed top 1 bits (of 2) from port B of cell toplevel_chip.$auto$fsm_map.cc:77:implement_pattern_cache$994 ($eq).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$auto$fsm_map.cc:77:implement_pattern_cache$1002 ($eq).
Removed top 2 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\dec_instr.$eq$d19_gsavant_16bit_serial_cpu/src/decode.sv:55$151 ($eq).
Removed top 2 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:144$3 ($eq).
Removed top 3 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:144$6 ($eq).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:148$8 ($eq).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:148$9 ($eq).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:148$11 ($eq).
Removed top 15 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16 ($add).
Removed top 31 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17 ($add).
Removed top 15 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17 ($add).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:164$18 ($mux).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:165$22 ($mux).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:166$26 ($mux).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:167$30 ($mux).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:168$34 ($mux).
Removed top 16 bits (of 32) from mux cell toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:169$38 ($mux).
Removed top 30 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40 ($add).
Removed top 16 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40 ($add).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$796_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$797_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$798_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$801_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$805_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$807_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$858_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.$procmux$859_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\dec_instr.$eq$d19_gsavant_16bit_serial_cpu/src/decode.sv:55$154 ($eq).
Removed top 29 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$lt$d19_gsavant_16bit_serial_cpu/src/components.sv:41$123 ($lt).
Removed top 30 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$ge$d19_gsavant_16bit_serial_cpu/src/components.sv:40$120 ($ge).
Removed top 31 bits (of 32) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119 ($add).
Removed top 27 bits (of 32) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119 ($add).
Removed top 2 bits (of 5) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$113 ($eq).
Removed top 3 bits (of 5) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$108 ($eq).
Removed top 2 bits (of 3) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$ne$d19_gsavant_16bit_serial_cpu/src/components.sv:18$106 ($ne).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$240_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$239_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$238_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$237_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$236_CMP0 ($eq).
Removed top 11 bits (of 16) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$sshr$d19_gsavant_16bit_serial_cpu/src/alu.sv:15$146 ($sshr).
Removed top 1 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$241_CMP0 ($eq).
Removed top 11 bits (of 16) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$shr$d19_gsavant_16bit_serial_cpu/src/alu.sv:14$144 ($shr).
Removed top 3 bits (of 4) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$procmux$242_CMP0 ($eq).
Removed top 11 bits (of 16) from port B of cell toplevel_chip.$flatten\mchip.\cpu.\alu.$shl$d19_gsavant_16bit_serial_cpu/src/alu.sv:13$142 ($shl).
Removed top 1 bits (of 17) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16 ($add).
Removed top 1 bits (of 17) from port Y of cell toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17 ($add).
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16_Y.
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40_Y.
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:166$26_Y.
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:167$30_Y.
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:168$34_Y.
Removed top 16 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.$ternary$d19_gsavant_16bit_serial_cpu/src/core.sv:169$38_Y.
Removed top 27 bits (of 32) from wire toplevel_chip.$flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119_Y.

10.11. Executing PEEPOPT pass (run peephole optimizers).

10.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

10.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  creating $macc model for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16 ($add).
  creating $macc model for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17 ($add).
  creating $macc model for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40 ($add).
  creating $macc model for $flatten\mchip.\cpu.\alu.$add$d19_gsavant_16bit_serial_cpu/src/alu.sv:11$139 ($add).
  creating $macc model for $flatten\mchip.\cpu.\alu.$sub$d19_gsavant_16bit_serial_cpu/src/alu.sv:12$140 ($sub).
  creating $macc model for $flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119 ($add).
  creating $alu model for $macc $flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119.
  creating $alu model for $macc $flatten\mchip.\cpu.\alu.$sub$d19_gsavant_16bit_serial_cpu/src/alu.sv:12$140.
  creating $alu model for $macc $flatten\mchip.\cpu.\alu.$add$d19_gsavant_16bit_serial_cpu/src/alu.sv:11$139.
  creating $alu model for $macc $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40.
  creating $alu model for $macc $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17.
  creating $alu model for $macc $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16.
  creating $alu model for $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:167$27 ($ge): new $alu
  creating $alu model for $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35 ($ge): new $alu
  creating $alu model for $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:166$23 ($lt): merged with $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:167$27.
  creating $alu model for $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:168$31 ($lt): merged with $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35.
  creating $alu model for $flatten\mchip.\cpu.\instr_shift.$ge$d19_gsavant_16bit_serial_cpu/src/components.sv:40$120 ($ge): new $alu
  creating $alu model for $flatten\mchip.\cpu.\instr_shift.$lt$d19_gsavant_16bit_serial_cpu/src/components.sv:41$123 ($lt): new $alu
  creating $alu model for $flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:164$15 ($eq): merged with $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35.
  creating $alu model for $flatten\mchip.\cpu.$ne$d19_gsavant_16bit_serial_cpu/src/core.sv:165$19 ($ne): merged with $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35.
  creating $alu model for $flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$108 ($eq): merged with $flatten\mchip.\cpu.\instr_shift.$ge$d19_gsavant_16bit_serial_cpu/src/components.sv:40$120.
  creating $alu model for $flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$113 ($eq): merged with $flatten\mchip.\cpu.\instr_shift.$lt$d19_gsavant_16bit_serial_cpu/src/components.sv:41$123.
  creating $alu cell for $flatten\mchip.\cpu.\instr_shift.$lt$d19_gsavant_16bit_serial_cpu/src/components.sv:41$123, $flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$113: $auto$alumacc.cc:485:replace_alu$1081
  creating $alu cell for $flatten\mchip.\cpu.\instr_shift.$ge$d19_gsavant_16bit_serial_cpu/src/components.sv:40$120, $flatten\mchip.\cpu.\instr_shift.$eq$d19_gsavant_16bit_serial_cpu/src/components.sv:18$108: $auto$alumacc.cc:485:replace_alu$1092
  creating $alu cell for $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35, $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:168$31, $flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:164$15, $flatten\mchip.\cpu.$ne$d19_gsavant_16bit_serial_cpu/src/core.sv:165$19: $auto$alumacc.cc:485:replace_alu$1101
  creating $alu cell for $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:167$27, $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:166$23: $auto$alumacc.cc:485:replace_alu$1116
  creating $alu cell for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$16: $auto$alumacc.cc:485:replace_alu$1131
  creating $alu cell for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:164$17: $auto$alumacc.cc:485:replace_alu$1134
  creating $alu cell for $flatten\mchip.\cpu.$add$d19_gsavant_16bit_serial_cpu/src/core.sv:173$40: $auto$alumacc.cc:485:replace_alu$1137
  creating $alu cell for $flatten\mchip.\cpu.\alu.$add$d19_gsavant_16bit_serial_cpu/src/alu.sv:11$139: $auto$alumacc.cc:485:replace_alu$1140
  creating $alu cell for $flatten\mchip.\cpu.\alu.$sub$d19_gsavant_16bit_serial_cpu/src/alu.sv:12$140: $auto$alumacc.cc:485:replace_alu$1143
  creating $alu cell for $flatten\mchip.\cpu.\instr_shift.$add$d19_gsavant_16bit_serial_cpu/src/components.sv:39$119: $auto$alumacc.cc:485:replace_alu$1146
  created 10 $alu and 0 $macc cells.

10.14. Executing SHARE pass (SAT-based resource sharing).
Found 5 cells in module toplevel_chip that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59 ($memrd):
    Found 23 activation_patterns using ctrl signal { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP $flatten\mchip.\cpu.$procmux$798_CMP $flatten\mchip.\cpu.$procmux$797_CMP $flatten\mchip.\cpu.$procmux$796_CMP $flatten\mchip.\cpu.$procmux$795_CMP $flatten\mchip.\cpu.$procmux$794_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y \mchip.cpu.ctrl [2] \io_in [9] }.
    Found 1 candidates: $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57
    Analyzing resource sharing with $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57 ($memrd):
      Found 14 activation_patterns using ctrl signal { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP $flatten\mchip.\cpu.$procmux$798_CMP $flatten\mchip.\cpu.$procmux$797_CMP $flatten\mchip.\cpu.$procmux$796_CMP $flatten\mchip.\cpu.$procmux$795_CMP $flatten\mchip.\cpu.$procmux$794_CMP }.
      Forbidden control signals for this pair of cells: { $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:169$35_Y $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:168$31_Y $flatten\mchip.\cpu.$ge$d19_gsavant_16bit_serial_cpu/src/core.sv:167$27_Y $flatten\mchip.\cpu.$lt$d19_gsavant_16bit_serial_cpu/src/core.sv:166$23_Y $flatten\mchip.\cpu.$ne$d19_gsavant_16bit_serial_cpu/src/core.sv:165$19_Y $flatten\mchip.\cpu.$eq$d19_gsavant_16bit_serial_cpu/src/core.sv:164$15_Y }
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$795_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$794_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$798_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$796_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$797_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y \mchip.cpu.ctrl [2] \io_in [9] } = 3'010
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP } = 5'10000
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:19$59: { $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y } = 5'10100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$795_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$794_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$798_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$796_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$797_CMP } = 3'011
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Activation pattern for cell $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57: { $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP } = 3'100
      Size of SAT problem: 0 cells, 524 variables, 1807 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:18$58_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$805_CMP $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP $flatten\mchip.\cpu.$procmux$798_CMP $flatten\mchip.\cpu.$procmux$797_CMP $flatten\mchip.\cpu.$procmux$796_CMP $flatten\mchip.\cpu.$procmux$795_CMP $flatten\mchip.\cpu.$procmux$794_CMP $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:148$12_Y $flatten\mchip.\cpu.$or$d19_gsavant_16bit_serial_cpu/src/core.sv:144$7_Y \mchip.cpu.ctrl [2] \io_in [9] } = 24'000000010000101000000000
  Analyzing resource sharing options for $flatten\mchip.\cpu.\rf.$memrd$\reg_file$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:16$57 ($memrd):
    Found 14 activation_patterns using ctrl signal { $flatten\mchip.\cpu.\alu.$procmux$236_CMP $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\alu.$procmux$242_CMP $flatten\mchip.\cpu.\alu.$procmux$243_CMP $flatten\mchip.\cpu.\rf.$eq$d19_gsavant_16bit_serial_cpu/src/reg_file.sv:15$56_Y $flatten\mchip.\cpu.$procmux$807_CMP $flatten\mchip.\cpu.$procmux$801_CMP $flatten\mchip.\cpu.$procmux$799_CMP $flatten\mchip.\cpu.$procmux$798_CMP $flatten\mchip.\cpu.$procmux$797_CMP $flatten\mchip.\cpu.$procmux$796_CMP $flatten\mchip.\cpu.$procmux$795_CMP $flatten\mchip.\cpu.$procmux$794_CMP }.
    No candidates found.
  Analyzing resource sharing options for $flatten\mchip.\cpu.\alu.$sshr$d19_gsavant_16bit_serial_cpu/src/alu.sv:15$146 ($sshr):
    Found 1 activation_patterns using ctrl signal $flatten\mchip.\cpu.\alu.$procmux$239_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\mchip.\cpu.\alu.$shr$d19_gsavant_16bit_serial_cpu/src/alu.sv:14$144 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\mchip.\cpu.\alu.$procmux$240_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\mchip.\cpu.\alu.$shl$d19_gsavant_16bit_serial_cpu/src/alu.sv:13$142 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\mchip.\cpu.\alu.$procmux$241_CMP.
    No candidates found.

10.15. Executing OPT pass (performing simple optimizations).

10.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~2 debug messages>

10.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

10.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.15.6. Executing OPT_DFF pass (perform DFF optimizations).

10.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

10.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.15.9. Rerunning OPT passes. (Maybe there is more to do..)

10.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

10.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.15.13. Executing OPT_DFF pass (perform DFF optimizations).

10.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.15.16. Finished OPT passes. (There is nothing left to do.)

10.16. Executing MEMORY pass.

10.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

10.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 21 transformations.

10.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 0.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 1.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 2.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 3.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 4.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 5.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 6.
  Analyzing toplevel_chip.mchip.cpu.rf.reg_file write port 7.

10.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

10.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\mchip.cpu.rf.reg_file'[0] in module `\toplevel_chip': no output FF found.
Checking read port `\mchip.cpu.rf.reg_file'[1] in module `\toplevel_chip': no output FF found.
Checking read port address `\mchip.cpu.rf.reg_file'[0] in module `\toplevel_chip': no address FF found.
Checking read port address `\mchip.cpu.rf.reg_file'[1] in module `\toplevel_chip': no address FF found.

10.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory toplevel_chip.mchip.cpu.rf.reg_file by address:
Consolidating write ports of memory toplevel_chip.mchip.cpu.rf.reg_file by address:
  Merging ports 1, 2 (address 3'010).
  Merging ports 3, 4 (address 3'100).
  Merging ports 3, 5 (address 3'100).
  Merging ports 3, 6 (address 3'100).
Consolidating write ports of memory toplevel_chip.mchip.cpu.rf.reg_file by address:
  Merging ports 0, 1 (address 3'001).
  Merging ports 0, 2 (address 3'000).
Consolidating write ports of memory toplevel_chip.mchip.cpu.rf.reg_file by address:
Consolidating write ports of memory toplevel_chip.mchip.cpu.rf.reg_file using sat-based resource sharing:

10.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

10.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

10.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.18. Executing OPT pass (performing simple optimizations).

10.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~25 debug messages>

10.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.18.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1034 ($sdffe) from module toplevel_chip (D = \mchip.cpu.pc_reg.prll_in [0], Q = \mchip.cpu.pc_reg.prll_out [0]).

10.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

10.18.5. Rerunning OPT passes. (Removed registers in this run.)

10.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1 debug messages>

10.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.18.8. Executing OPT_DFF pass (perform DFF optimizations).

10.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.18.10. Finished fast OPT passes.

10.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \mchip.cpu.rf.reg_file in module \toplevel_chip:
  created 8 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 14 $mux cells.
  write interface: 16 write mux blocks.

10.20. Executing OPT pass (performing simple optimizations).

10.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~16 debug messages>

10.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

10.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\cpu.\ctrl_fsm.$procmux$391:
      Old ports: A=2'00, B={ $flatten\mchip.\cpu.$procmux$804_CMP $flatten\mchip.\cpu.$procmux$804_CMP }, Y=\mchip.cpu.ctrl [2:1]
      New ports: A=1'0, B=$flatten\mchip.\cpu.$procmux$804_CMP, Y=\mchip.cpu.ctrl [1]
      New connections: \mchip.cpu.ctrl [2] = \mchip.cpu.ctrl [1]
  Optimizing cells in module \toplevel_chip.
Performed a total of 1 changes.

10.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

10.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\mchip.\cpu.\alu.$procmux$235 in front of them:
        $auto$alumacc.cc:485:replace_alu$1143
        $auto$alumacc.cc:485:replace_alu$1140

10.20.7. Executing OPT_DFF pass (perform DFF optimizations).

10.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 44 unused wires.
<suppressed ~1 debug messages>

10.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1 debug messages>

10.20.10. Rerunning OPT passes. (Maybe there is more to do..)

10.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

10.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    New ctrl vector for $pmux cell $flatten\mchip.\cpu.\alu.$procmux$235: { $flatten\mchip.\cpu.\alu.$procmux$241_CMP $flatten\mchip.\cpu.\alu.$procmux$240_CMP $flatten\mchip.\cpu.\alu.$procmux$239_CMP $flatten\mchip.\cpu.\alu.$procmux$238_CMP $flatten\mchip.\cpu.\alu.$procmux$237_CMP $flatten\mchip.\cpu.\alu.$procmux$236_CMP }
  Optimizing cells in module \toplevel_chip.
Performed a total of 1 changes.

10.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.20.14. Executing OPT_SHARE pass.

10.20.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[7]$1173 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[7][1][0]$y$1318, Q = \mchip.cpu.rf.reg_file[7]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[6]$1171 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[6][1][0]$y$1308, Q = \mchip.cpu.rf.reg_file[6]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[5]$1169 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[5][1][0]$y$1296, Q = \mchip.cpu.rf.reg_file[5]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[4]$1167 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[4][1][0]$y$1286, Q = \mchip.cpu.rf.reg_file[4]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[3]$1165 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[3][1][0]$y$1272, Q = \mchip.cpu.rf.reg_file[3]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[2]$1163 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[2][1][0]$y$1262, Q = \mchip.cpu.rf.reg_file[2]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[1]$1161 ($dff) from module toplevel_chip (D = $memory\mchip.cpu.rf.reg_file$wrmux[1][1][0]$y$1248, Q = \mchip.cpu.rf.reg_file[1]).
Adding EN signal on $memory\mchip.cpu.rf.reg_file[0]$1159 ($dff) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[0]).

10.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

10.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~14 debug messages>

10.20.18. Rerunning OPT passes. (Maybe there is more to do..)

10.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

10.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.20.22. Executing OPT_SHARE pass.

10.20.23. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1344 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[1], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1341 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[2], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1338 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[3], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1335 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[4], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1332 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[5], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1329 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[6], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$1326 ($dffe) from module toplevel_chip (D = \mchip.cpu.rf.rd_data, Q = \mchip.cpu.rf.reg_file[7], rval = 16'0000000000000000).

10.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 7 unused cells and 14 unused wires.
<suppressed ~8 debug messages>

10.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.20.26. Rerunning OPT passes. (Maybe there is more to do..)

10.20.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

10.20.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

10.20.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

10.20.30. Executing OPT_SHARE pass.

10.20.31. Executing OPT_DFF pass (perform DFF optimizations).

10.20.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

10.20.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

10.20.34. Finished OPT passes. (There is nothing left to do.)

10.21. Executing TECHMAP pass (map to technology primitives).

10.21.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using template $paramod$03eba0cdd46566f6651a3011e0b5671fa6b5e494\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$d4c0c20b0ee59f495e14575c4397dc0a6dd9e8e6\_90_alu for cells of type $alu.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using template $paramod$3b7577489eb4433b1d5620cab7f3794743dee5ea\_90_alu for cells of type $alu.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$9a7f8f842c7d15a8f6b6820db3daba71c00239a1\_90_alu for cells of type $alu.
Using template $paramod$fb2ccc7567b9f572f99303d62bd705e69acf8cd5\_90_pmux for cells of type $pmux.
Using template $paramod$d5c1c4131927aec19f116e7a36372b1981bfcd7e\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$3ac6e4268d0279df14823f25676acf685165517e\_90_alu for cells of type $alu.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$d6ad34c3e8b1036f1e4815fdfe7d812ab0f136af\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$f32fe74d2f8ab5a9d1f90720afb1f17fabd90573\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$7354c247b305eda7a69b0d7d9e3b06c015b65190\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~2426 debug messages>

10.22. Executing OPT pass (performing simple optimizations).

10.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~740 debug messages>

10.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~924 debug messages>
Removed a total of 308 cells.

10.22.3. Executing OPT_DFF pass (perform DFF optimizations).

10.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 90 unused cells and 1070 unused wires.
<suppressed ~91 debug messages>

10.22.5. Finished fast OPT passes.

10.23. Executing ABC pass (technology mapping using ABC).

10.23.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Extracted 2038 gates and 2280 wires to a netlist network with 241 inputs and 122 outputs.

10.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.23.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       28
ABC RESULTS:               NOR cells:       77
ABC RESULTS:               MUX cells:      666
ABC RESULTS:               NOT cells:      219
ABC RESULTS:             ORNOT cells:       54
ABC RESULTS:                OR cells:      322
ABC RESULTS:               AND cells:       45
ABC RESULTS:              NAND cells:       50
ABC RESULTS:            ANDNOT cells:      543
ABC RESULTS:               XOR cells:      102
ABC RESULTS:        internal signals:     1917
ABC RESULTS:           input signals:      241
ABC RESULTS:          output signals:      122
Removing temp directory.

10.24. Executing OPT pass (performing simple optimizations).

10.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~24 debug messages>

10.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

10.24.3. Executing OPT_DFF pass (perform DFF optimizations).

10.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 827 unused wires.
<suppressed ~23 debug messages>

10.24.5. Finished fast OPT passes.

10.25. Executing HIERARCHY pass (managing design hierarchy).

10.25.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

10.25.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

10.26. Printing statistics.

=== toplevel_chip ===

   Number of wires:               2132
   Number of wire bits:           2801
   Number of public wires:          91
   Number of public wire bits:     752
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2335
     $_ANDNOT_                     543
     $_AND_                         44
     $_DFFE_PP_                     16
     $_DFF_P_                       14
     $_MUX_                        666
     $_NAND_                        50
     $_NOR_                         77
     $_NOT_                        219
     $_ORNOT_                       54
     $_OR_                         322
     $_SDFFCE_PN0P_                112
     $_SDFFE_PP0P_                  80
     $_SDFFE_PP1P_                   3
     $_SDFF_PP0_                     5
     $_XNOR_                        28
     $_XOR_                        102

10.27. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

11. Executing SETUNDEF pass (replace undef values with defined constants).

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Executing ASYNC2SYNC pass.

14. Executing SYNTH pass.

14.1. Executing HIERARCHY pass (managing design hierarchy).

14.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

14.1.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

14.2. Executing PROC pass (convert processes to netlists).

14.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

14.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

14.2.4. Executing PROC_INIT pass (extract init attributes).

14.2.5. Executing PROC_ARST pass (detect async resets in processes).

14.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

14.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

14.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

14.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

14.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

14.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.5. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

14.6. Executing OPT pass (performing simple optimizations).

14.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

14.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.6.6. Executing OPT_DFF pass (perform DFF optimizations).

14.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.6.9. Finished OPT passes. (There is nothing left to do.)

14.7. Executing FSM pass (extract and optimize FSM).

14.7.1. Executing FSM_DETECT pass (finding FSMs in design).

14.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

14.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

14.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

14.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

14.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

14.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

14.8. Executing OPT pass (performing simple optimizations).

14.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

14.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.8.6. Executing OPT_DFF pass (perform DFF optimizations).

14.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.8.9. Finished OPT passes. (There is nothing left to do.)

14.9. Executing WREDUCE pass (reducing word size of cells).

14.10. Executing PEEPOPT pass (run peephole optimizers).

14.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  created 0 $alu and 0 $macc cells.

14.13. Executing SHARE pass (SAT-based resource sharing).

14.14. Executing OPT pass (performing simple optimizations).

14.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

14.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.14.9. Finished OPT passes. (There is nothing left to do.)

14.15. Executing MEMORY pass.

14.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

14.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

14.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

14.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

14.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

14.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

14.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

14.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

14.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.17. Executing OPT pass (performing simple optimizations).

14.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.17.3. Executing OPT_DFF pass (perform DFF optimizations).

14.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.17.5. Finished fast OPT passes.

14.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

14.19. Executing OPT pass (performing simple optimizations).

14.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

14.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.19.6. Executing OPT_SHARE pass.

14.19.7. Executing OPT_DFF pass (perform DFF optimizations).

14.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.19.10. Finished OPT passes. (There is nothing left to do.)

14.20. Executing TECHMAP pass (map to technology primitives).

14.20.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

14.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

14.21. Executing OPT pass (performing simple optimizations).

14.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

14.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.21.3. Executing OPT_DFF pass (perform DFF optimizations).

14.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

14.21.5. Finished fast OPT passes.

14.22. Executing ABC pass (technology mapping using ABC).

14.22.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Extracted 2105 gates and 2346 wires to a netlist network with 241 inputs and 122 outputs.

14.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

14.22.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       24
ABC RESULTS:               NOR cells:       45
ABC RESULTS:               MUX cells:      667
ABC RESULTS:               NOT cells:      210
ABC RESULTS:             ORNOT cells:       66
ABC RESULTS:                OR cells:      357
ABC RESULTS:               AND cells:       42
ABC RESULTS:              NAND cells:       30
ABC RESULTS:            ANDNOT cells:      564
ABC RESULTS:               XOR cells:       90
ABC RESULTS:        internal signals:     1983
ABC RESULTS:           input signals:      241
ABC RESULTS:          output signals:      122
Removing temp directory.

14.23. Executing OPT pass (performing simple optimizations).

14.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~47 debug messages>

14.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

14.23.3. Executing OPT_DFF pass (perform DFF optimizations).

14.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 2347 unused wires.
<suppressed ~2 debug messages>

14.23.5. Finished fast OPT passes.

14.24. Executing HIERARCHY pass (managing design hierarchy).

14.24.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

14.24.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

14.25. Printing statistics.

=== toplevel_chip ===

   Number of wires:               2121
   Number of wire bits:           2790
   Number of public wires:          91
   Number of public wire bits:     752
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2324
     $_ANDNOT_                     564
     $_AND_                         42
     $_DFFE_PP_                     16
     $_DFF_P_                       14
     $_MUX_                        667
     $_NAND_                        30
     $_NOR_                         45
     $_NOT_                        209
     $_ORNOT_                       66
     $_OR_                         357
     $_SDFFCE_PN0P_                112
     $_SDFFE_PP0P_                  80
     $_SDFFE_PP1P_                   3
     $_SDFF_PP0_                     5
     $_XNOR_                        24
     $_XOR_                         90

14.26. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.
Renaming module \toplevel_chip to \d19_gsavant_16bit_serial_cpu.

15. Executing Verilog backend.

15.1. Executing BMUXMAP pass.

15.2. Executing DEMUXMAP pass.
Dumping module `\d19_gsavant_16bit_serial_cpu'.

16. Executing CHECK pass (checking for obvious problems).
Checking module d19_gsavant_16bit_serial_cpu...
Found and reported 0 problems.

17. Printing statistics.

=== d19_gsavant_16bit_serial_cpu ===

   Number of wires:               2121
   Number of wire bits:           2790
   Number of public wires:          91
   Number of public wire bits:     752
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2324
     $_ANDNOT_                     564
     $_AND_                         42
     $_DFFE_PP_                     16
     $_DFF_P_                       14
     $_MUX_                        667
     $_NAND_                        30
     $_NOR_                         45
     $_NOT_                        209
     $_ORNOT_                       66
     $_OR_                         357
     $_SDFFCE_PN0P_                112
     $_SDFFE_PP0P_                  80
     $_SDFFE_PP1P_                   3
     $_SDFF_PP0_                     5
     $_XNOR_                        24
     $_XOR_                         90

End of script. Logfile hash: 14a107fa22, CPU: user 1.08s system 0.04s
Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 26% 45x opt_expr (0 sec), 17% 2x abc (0 sec), ...

