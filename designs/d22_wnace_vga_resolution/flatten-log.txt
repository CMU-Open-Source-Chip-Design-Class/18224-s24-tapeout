
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read_verilog -sv d22_wnace_vga_resolution/src/toplevel_chip.v d22_wnace_vga_resolution/src/chip.sv; synth -flatten -top toplevel_chip; setundef -undriven -zero; setundef -zero; async2sync; synth -top toplevel_chip; rename toplevel_chip d22_wnace_vga_resolution; write_verilog -attr2comment d22_wnace_vga_resolution/flattened.v; check; stat;' --

1. Executing Verilog-2005 frontend: d22_wnace_vga_resolution/src/toplevel_chip.v
Parsing SystemVerilog input from `d22_wnace_vga_resolution/src/toplevel_chip.v' to AST representation.
Generating RTLIL representation for module `\toplevel_chip'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: d22_wnace_vga_resolution/src/chip.sv
Parsing SystemVerilog input from `d22_wnace_vga_resolution/src/chip.sv' to AST representation.
Generating RTLIL representation for module `\my_chip'.
Generating RTLIL representation for module `\VGA_demonstrator'.
Generating RTLIL representation for module `\VGA_640x480'.
Generating RTLIL representation for module `\Graphics_640x480'.
Generating RTLIL representation for module `\VGA_800x480'.
Generating RTLIL representation for module `\Graphics_800x480'.
Generating RTLIL representation for module `\RangeCheck'.
Generating RTLIL representation for module `\OffsetCheck'.
Deferring `\Rectangle' because it contains parameter(s) without defaults.
Storing AST representation for module `$abstract\Rectangle'.
Generating RTLIL representation for module `\MagComp'.
Generating RTLIL representation for module `\Counter'.
Generating RTLIL representation for module `\Blink8LEDs'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             \Counter
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:             \VGA_800x480
Used module:                 \OffsetCheck
Used module:                     \RangeCheck
Used module:                         \MagComp
Used module:             \Graphics_640x480
Used module:             \VGA_640x480
Parameter 1 (\WIDTH) = 27

3.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Counter'.
Parameter 1 (\WIDTH) = 27
Generating RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011'.
Reprocessing module Blink8LEDs because instantiated module $paramod\Counter\WIDTH=s32'00000000000000000000000000011011 has become available.
Generating RTLIL representation for module `\Blink8LEDs'.
Parameter 1 (\WIDTH) = 10

3.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\OffsetCheck'.
Parameter 1 (\WIDTH) = 10
Generating RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10

3.1.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Counter'.
Parameter 1 (\WIDTH) = 10
Generating RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Reprocessing module VGA_640x480 because instantiated module Counter has become available.
Generating RTLIL representation for module `\VGA_640x480'.
Parameter \X = 10'1000110000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'1000110000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle'.
Parameter \X = 10'0111100000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0111100000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle'.
Parameter \X = 10'0110010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0110010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle'.
Parameter \X = 10'0101000000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0101000000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle'.
Parameter \X = 10'0011110000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.9. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0011110000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle'.
Parameter \X = 10'0010100000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.10. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0010100000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle'.
Parameter \X = 10'0001010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000

3.1.11. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0001010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001010000
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Reprocessing module VGA_800x480 because instantiated module Counter has become available.
Generating RTLIL representation for module `\VGA_800x480'.
Parameter \X = 10'1010111100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'110100100

3.1.12. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'1010111100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'110100100
Generating RTLIL representation for module `$paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle'.
Parameter \X = 10'1001011000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'101101000

3.1.13. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'1001011000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'101101000
Generating RTLIL representation for module `$paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle'.
Parameter \X = 10'0111110100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'100101100

3.1.14. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0111110100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'100101100
Generating RTLIL representation for module `$paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle'.
Parameter \X = 10'0110010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'011110000

3.1.15. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0110010000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'011110000
Generating RTLIL representation for module `$paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle'.
Parameter \X = 10'0100101100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'010110100

3.1.16. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0100101100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'010110100
Generating RTLIL representation for module `$paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle'.
Parameter \X = 10'0011001000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'001111000

3.1.17. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0011001000
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'001111000
Generating RTLIL representation for module `$paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle'.
Parameter \X = 10'0001100100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'000111100

3.1.18. Executing AST frontend in derive mode using pre-parsed AST for module `\Rectangle'.
Parameter \X = 10'0001100100
Parameter \Y = 9'000000000
Parameter \WIDTH = 10'0001100100
Parameter \HEIGHT = 9'000111100
Generating RTLIL representation for module `$paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle'.
Parameter 1 (\WIDTH) = 8

3.1.19. Executing AST frontend in derive mode using pre-parsed AST for module `\RangeCheck'.
Parameter 1 (\WIDTH) = 8
Generating RTLIL representation for module `$paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 8

3.1.20. Executing AST frontend in derive mode using pre-parsed AST for module `\MagComp'.
Parameter 1 (\WIDTH) = 8
Generating RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 8
Found cached RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001000'.

3.1.21. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             \Counter
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:                 $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle
Used module:                     \OffsetCheck
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001000
Used module:                             \MagComp
Used module:                 $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle
Used module:                 $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle
Used module:                 $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle
Used module:                 $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle
Used module:                 $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle
Used module:                 $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle
Used module:             \VGA_800x480
Used module:             \Graphics_640x480
Used module:                 $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle
Used module:                 $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle
Used module:                 $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle
Used module:                 $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle
Used module:                 $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle
Used module:                 $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle
Used module:                 $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle
Used module:             \VGA_640x480
Parameter 1 (\WIDTH) = 27
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 8
Found cached RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 8
Found cached RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 9

3.1.22. Executing AST frontend in derive mode using pre-parsed AST for module `\OffsetCheck'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010'.

3.1.23. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             $paramod\Counter\WIDTH=s32'00000000000000000000000000011011
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:                 $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                         \RangeCheck
Used module:                             $paramod\MagComp\WIDTH=s32'00000000000000000000000000001000
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                 $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle
Used module:                 $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle
Used module:                 $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle
Used module:                 $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle
Used module:                 $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle
Used module:                 $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle
Used module:             \VGA_800x480
Used module:                 $paramod\Counter\WIDTH=s32'00000000000000000000000000001010
Used module:             \Graphics_640x480
Used module:                 $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle
Used module:                 $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle
Used module:                 $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle
Used module:                 $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle
Used module:                 $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle
Used module:                 $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle
Used module:                 $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle
Used module:             \VGA_640x480
Parameter 1 (\WIDTH) = 9

3.1.24. Executing AST frontend in derive mode using pre-parsed AST for module `\RangeCheck'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10

3.1.25. Executing AST frontend in derive mode using pre-parsed AST for module `\RangeCheck'.
Parameter 1 (\WIDTH) = 10
Generating RTLIL representation for module `$paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010'.

3.1.26. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             $paramod\Counter\WIDTH=s32'00000000000000000000000000011011
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:                 $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                             \MagComp
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                 $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle
Used module:                 $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle
Used module:                 $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle
Used module:                 $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle
Used module:                 $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle
Used module:                 $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle
Used module:             \VGA_800x480
Used module:                 $paramod\Counter\WIDTH=s32'00000000000000000000000000001010
Used module:             \Graphics_640x480
Used module:                 $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle
Used module:                 $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle
Used module:                 $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle
Used module:                 $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle
Used module:                 $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle
Used module:                 $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle
Used module:                 $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle
Used module:             \VGA_640x480
Parameter 1 (\WIDTH) = 9

3.1.27. Executing AST frontend in derive mode using pre-parsed AST for module `\MagComp'.
Parameter 1 (\WIDTH) = 9
Generating RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 9
Found cached RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001'.
Parameter 1 (\WIDTH) = 10

3.1.28. Executing AST frontend in derive mode using pre-parsed AST for module `\MagComp'.
Parameter 1 (\WIDTH) = 10
Generating RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010'.
Parameter 1 (\WIDTH) = 10
Found cached RTLIL representation for module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010'.

3.1.29. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             $paramod\Counter\WIDTH=s32'00000000000000000000000000011011
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:                 $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                             $paramod\MagComp\WIDTH=s32'00000000000000000000000000001001
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                             $paramod\MagComp\WIDTH=s32'00000000000000000000000000001010
Used module:                 $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle
Used module:                 $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle
Used module:                 $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle
Used module:                 $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle
Used module:                 $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle
Used module:                 $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle
Used module:             \VGA_800x480
Used module:                 $paramod\Counter\WIDTH=s32'00000000000000000000000000001010
Used module:             \Graphics_640x480
Used module:                 $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle
Used module:                 $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle
Used module:                 $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle
Used module:                 $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle
Used module:                 $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle
Used module:                 $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle
Used module:                 $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle
Used module:             \VGA_640x480

3.1.30. Analyzing design hierarchy..
Top module:  \toplevel_chip
Used module:     \my_chip
Used module:         \Blink8LEDs
Used module:             $paramod\Counter\WIDTH=s32'00000000000000000000000000011011
Used module:         \VGA_demonstrator
Used module:             \Graphics_800x480
Used module:                 $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001
Used module:                             $paramod\MagComp\WIDTH=s32'00000000000000000000000000001001
Used module:                     $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                         $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010
Used module:                             $paramod\MagComp\WIDTH=s32'00000000000000000000000000001010
Used module:                 $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle
Used module:                 $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle
Used module:                 $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle
Used module:                 $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle
Used module:                 $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle
Used module:                 $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle
Used module:             \VGA_800x480
Used module:                 $paramod\Counter\WIDTH=s32'00000000000000000000000000001010
Used module:             \Graphics_640x480
Used module:                 $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle
Used module:                 $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle
Used module:                 $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle
Used module:                 $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle
Used module:                 $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle
Used module:                 $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle
Used module:                 $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle
Used module:             \VGA_640x480
Removing unused module `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001000'.
Removing unused module `$paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001000'.
Removing unused module `\Counter'.
Removing unused module `\MagComp'.
Removing unused module `$abstract\Rectangle'.
Removing unused module `\OffsetCheck'.
Removing unused module `\RangeCheck'.
Removed 7 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$d22_wnace_vga_resolution/src/chip.sv:339$125 in module VGA_800x480.
Marked 1 switch rules as full_case in process $proc$d22_wnace_vga_resolution/src/chip.sv:190$97 in module VGA_640x480.
Marked 3 switch rules as full_case in process $proc$d22_wnace_vga_resolution/src/chip.sv:496$65 in module $paramod\Counter\WIDTH=s32'00000000000000000000000000011011.
Marked 3 switch rules as full_case in process $proc$d22_wnace_vga_resolution/src/chip.sv:496$74 in module $paramod\Counter\WIDTH=s32'00000000000000000000000000001010.
Marked 1 switch rules as full_case in process $proc$d22_wnace_vga_resolution/src/chip.sv:0$1 in module VGA_demonstrator.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 12 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\VGA_800x480.$proc$d22_wnace_vga_resolution/src/chip.sv:339$125'.
Found async reset \reset in `\VGA_640x480.$proc$d22_wnace_vga_resolution/src/chip.sv:190$97'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~9 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\VGA_800x480.$proc$d22_wnace_vga_resolution/src/chip.sv:339$125'.
     1/1: $0\state[31:0]
Creating decoders for process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:0$149'.
Creating decoders for process `\VGA_640x480.$proc$d22_wnace_vga_resolution/src/chip.sv:190$97'.
     1/1: $0\state[31:0]
Creating decoders for process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.$proc$d22_wnace_vga_resolution/src/chip.sv:0$145'.
Creating decoders for process `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011.$proc$d22_wnace_vga_resolution/src/chip.sv:496$65'.
     1/1: $0\Q[26:0]
Creating decoders for process `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:496$74'.
     1/1: $0\Q[9:0]
Creating decoders for process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
     1/6: $1\blank[0:0]
     2/6: $1\HS[0:0]
     3/6: $1\VS[0:0]
     4/6: $1\VGA_BLUE[2:0]
     5/6: $1\VGA_GREEN[2:0]
     6/6: $1\VGA_RED[2:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.\AltB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:0$149'.
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.\AeqB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:0$149'.
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.\AgtB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:0$149'.
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.\AltB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.$proc$d22_wnace_vga_resolution/src/chip.sv:0$145'.
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.\AeqB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.$proc$d22_wnace_vga_resolution/src/chip.sv:0$145'.
No latch inferred for signal `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.\AgtB' from process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.$proc$d22_wnace_vga_resolution/src/chip.sv:0$145'.
No latch inferred for signal `\VGA_demonstrator.\VGA_RED' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
No latch inferred for signal `\VGA_demonstrator.\VGA_GREEN' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
No latch inferred for signal `\VGA_demonstrator.\VGA_BLUE' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
No latch inferred for signal `\VGA_demonstrator.\VS' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
No latch inferred for signal `\VGA_demonstrator.\HS' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
No latch inferred for signal `\VGA_demonstrator.\blank' from process `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\VGA_800x480.\state' using process `\VGA_800x480.$proc$d22_wnace_vga_resolution/src/chip.sv:339$125'.
  created $adff cell `$procdff$193' with positive edge clock and positive level reset.
Creating register for signal `\VGA_640x480.\state' using process `\VGA_640x480.$proc$d22_wnace_vga_resolution/src/chip.sv:190$97'.
  created $adff cell `$procdff$194' with positive edge clock and positive level reset.
Creating register for signal `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011.\Q' using process `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011.$proc$d22_wnace_vga_resolution/src/chip.sv:496$65'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010.\Q' using process `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:496$74'.
  created $dff cell `$procdff$196' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `VGA_800x480.$proc$d22_wnace_vga_resolution/src/chip.sv:339$125'.
Removing empty process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:0$149'.
Removing empty process `VGA_640x480.$proc$d22_wnace_vga_resolution/src/chip.sv:190$97'.
Removing empty process `$paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.$proc$d22_wnace_vga_resolution/src/chip.sv:0$145'.
Found and cleaned up 4 empty switches in `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011.$proc$d22_wnace_vga_resolution/src/chip.sv:496$65'.
Removing empty process `$paramod\Counter\WIDTH=s32'00000000000000000000000000011011.$proc$d22_wnace_vga_resolution/src/chip.sv:496$65'.
Found and cleaned up 4 empty switches in `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:496$74'.
Removing empty process `$paramod\Counter\WIDTH=s32'00000000000000000000000000001010.$proc$d22_wnace_vga_resolution/src/chip.sv:496$74'.
Found and cleaned up 1 empty switch in `\VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
Removing empty process `VGA_demonstrator.$proc$d22_wnace_vga_resolution/src/chip.sv:0$1'.
Cleaned up 9 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle.
Optimizing module $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle.
Optimizing module $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle.
Optimizing module $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle.
Optimizing module VGA_800x480.
<suppressed ~1 debug messages>
Optimizing module $paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.
Optimizing module $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle.
Optimizing module $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle.
Optimizing module $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle.
Optimizing module $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle.
Optimizing module $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle.
Optimizing module $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle.
Optimizing module VGA_640x480.
<suppressed ~1 debug messages>
Optimizing module $paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.
Optimizing module $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010.
Optimizing module Blink8LEDs.
Optimizing module $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle.
Optimizing module $paramod\Counter\WIDTH=s32'00000000000000000000000000011011.
Optimizing module $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010.
Optimizing module $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001.
Optimizing module $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001.
Optimizing module $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle.
Optimizing module $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle.
Optimizing module Graphics_800x480.
Optimizing module $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle.
Optimizing module Graphics_640x480.
Optimizing module $paramod\Counter\WIDTH=s32'00000000000000000000000000001010.
Optimizing module VGA_demonstrator.
Optimizing module my_chip.
Optimizing module toplevel_chip.

3.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$cff156d7e26545a086f2ecda0f8d853cf80ff04e\Rectangle.
Deleting now unused module $paramod$774c96192dfb759ca6411a96931e60812286072b\Rectangle.
Deleting now unused module $paramod$0e23e8dc141fc4f38cb51a29a421e89657545a1d\Rectangle.
Deleting now unused module $paramod$3cb4a15c7004664b0b6b171882ec0e125b942a0c\Rectangle.
Deleting now unused module VGA_800x480.
Deleting now unused module $paramod\MagComp\WIDTH=s32'00000000000000000000000000001010.
Deleting now unused module $paramod$75b6e1390be42b742bc129794ac0ac8551968837\Rectangle.
Deleting now unused module $paramod$0cc17c910e4418a322df50e2838350aef7cf12d9\Rectangle.
Deleting now unused module $paramod$f5f9680fcce2caaaa64dcca924331b26cd814cc2\Rectangle.
Deleting now unused module $paramod$eadd4b6ae00f6bb245c199da1478f97e8b761d02\Rectangle.
Deleting now unused module $paramod$f1e1e0955dd540b23acb8331bc97aa1705948b6a\Rectangle.
Deleting now unused module $paramod$1ef82a6c1cddd48ae66bd482212943b9182ec457\Rectangle.
Deleting now unused module VGA_640x480.
Deleting now unused module $paramod\MagComp\WIDTH=s32'00000000000000000000000000001001.
Deleting now unused module $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001010.
Deleting now unused module Blink8LEDs.
Deleting now unused module $paramod$873f1d8b7b3113851014df7877bb4d94326420ad\Rectangle.
Deleting now unused module $paramod\Counter\WIDTH=s32'00000000000000000000000000011011.
Deleting now unused module $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001010.
Deleting now unused module $paramod\RangeCheck\WIDTH=s32'00000000000000000000000000001001.
Deleting now unused module $paramod\OffsetCheck\WIDTH=s32'00000000000000000000000000001001.
Deleting now unused module $paramod$e0ec5491208fa56a044ba5f416bad1fac95199ea\Rectangle.
Deleting now unused module $paramod$ffa308bfe98cd487cc6c184de6315fb3b27f72b5\Rectangle.
Deleting now unused module Graphics_800x480.
Deleting now unused module $paramod$187f56c12f453d6b709159bf4f489d137ba4b567\Rectangle.
Deleting now unused module Graphics_640x480.
Deleting now unused module $paramod\Counter\WIDTH=s32'00000000000000000000000000001010.
Deleting now unused module VGA_demonstrator.
Deleting now unused module my_chip.
<suppressed ~64 debug messages>

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~60 debug messages>

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 114 unused cells and 681 unused wires.
<suppressed ~214 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~150 debug messages>
Removed a total of 50 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 2 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 3 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 4 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 5 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 6 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 7 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 8 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 9 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 10 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 11 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 12 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 13 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 14 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 15 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 16 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 17 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 18 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 19 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 20 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 21 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 22 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 23 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 24 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 25 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 26 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 27 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 28 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 29 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 30 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.
Setting constant 0-bit at position 31 on $flatten\mchip.\vgad.\v0.$procdff$194 ($adff) from module toplevel_chip.

3.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 58 unused wires.
<suppressed ~47 debug messages>

3.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.7.9. Rerunning OPT passes. (Maybe there is more to do..)

3.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.7.13. Executing OPT_DFF pass (perform DFF optimizations).

3.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.7.16. Finished OPT passes. (There is nothing left to do.)

3.8. Executing FSM pass (extract and optimize FSM).

3.8.1. Executing FSM_DETECT pass (finding FSMs in design).

3.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.9. Executing OPT pass (performing simple optimizations).

3.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\mchip.\vgad.\v1.\vcounter.$procdff$196 ($dff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v1.\vcounter.$procmux$167_Y, Q = \mchip.vgad.v1.vcounter.Q, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$198 ($sdff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v1.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75_Y, Q = \mchip.vgad.v1.vcounter.Q).
Adding SRST signal on $flatten\mchip.\vgad.\v1.\hcounter.$procdff$196 ($dff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v1.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75_Y, Q = \mchip.vgad.v1.hcounter.Q, rval = 10'0000000000).
Adding SRST signal on $flatten\mchip.\vgad.\v0.\vcounter.$procdff$196 ($dff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v0.\vcounter.$procmux$167_Y, Q = \mchip.vgad.v0.vcounter.Q, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$201 ($sdff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v0.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75_Y, Q = \mchip.vgad.v0.vcounter.Q).
Adding SRST signal on $flatten\mchip.\vgad.\v0.\hcounter.$procdff$196 ($dff) from module toplevel_chip (D = $flatten\mchip.\vgad.\v0.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75_Y, Q = \mchip.vgad.v0.hcounter.Q, rval = 10'0000000000).

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

3.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.9.9. Rerunning OPT passes. (Maybe there is more to do..)

3.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.9.13. Executing OPT_DFF pass (perform DFF optimizations).

3.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.9.16. Finished OPT passes. (There is nothing left to do.)

3.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 3 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 3 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 8 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148 ($gt).
Removed top 1 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g0.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\v1.$eq$d22_wnace_vga_resolution/src/chip.sv:310$118 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 1 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r3.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 1 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r2.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 1 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 2 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r1.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt).
Removed top 3 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq).
Removed top 3 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt).
Removed top 2 bits (of 10) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt).
Removed top 8 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148 ($gt).
Removed top 3 bits (of 9) from port B of cell toplevel_chip.$flatten\mchip.\vgad.\g1.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt).

3.11. Executing PEEPOPT pass (run peephole optimizers).

3.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  creating $macc model for $flatten\mchip.\livecheck.\ledcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$66 ($add).
  creating $macc model for $flatten\mchip.\vgad.\v0.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75 ($add).
  creating $macc model for $flatten\mchip.\vgad.\v0.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75 ($add).
  creating $macc model for $flatten\mchip.\vgad.\v1.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75 ($add).
  creating $macc model for $flatten\mchip.\vgad.\v1.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75 ($add).
  creating $alu model for $macc $flatten\mchip.\vgad.\v1.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75.
  creating $alu model for $macc $flatten\mchip.\vgad.\v1.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75.
  creating $alu model for $macc $flatten\mchip.\vgad.\v0.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75.
  creating $alu model for $macc $flatten\mchip.\vgad.\v0.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75.
  creating $alu model for $macc $flatten\mchip.\livecheck.\ledcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$66.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r1.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r2.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r3.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r4.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r5.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): merged with $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r6.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151 ($lt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152 ($gt): new $alu
  creating $alu model for $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151.
  creating $alu model for $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu model for $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu model for $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu model for $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150 ($eq): merged with $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152.
  creating $alu cell for $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$238
  creating $alu cell for $flatten\mchip.\vgad.\v1.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$245
  creating $alu cell for $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$256
  creating $alu cell for $flatten\mchip.\vgad.\v1.\hpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$267
  creating $alu cell for $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$272
  creating $alu cell for $flatten\mchip.\vgad.\v0.\vpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$279
  creating $alu cell for $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$290
  creating $alu cell for $flatten\mchip.\vgad.\v0.\hpulse_oc.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$301
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r6.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$306
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$311
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r5.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$316
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r6.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$321
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r4.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$332
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r5.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$337
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r3.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$348
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$359
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r2.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$370
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$381
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r1.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$392
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$403
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148: $auto$alumacc.cc:485:replace_alu$414
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$419
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$430
  creating $alu cell for $flatten\mchip.\vgad.\g1.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g1.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$437
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151: $auto$alumacc.cc:485:replace_alu$448
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r6.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$453
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r5.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$464
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r4.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$475
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r3.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$486
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r2.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$497
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r0.\y.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$148: $auto$alumacc.cc:485:replace_alu$508
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r0.\y.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$147: $auto$alumacc.cc:485:replace_alu$513
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$524
  creating $alu cell for $flatten\mchip.\vgad.\g0.\r0.\x.\rc.\higher.$lt$d22_wnace_vga_resolution/src/chip.sv:484$151, $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$gt$d22_wnace_vga_resolution/src/chip.sv:485$152, $flatten\mchip.\vgad.\g0.\r1.\x.\rc.\lower.$eq$d22_wnace_vga_resolution/src/chip.sv:483$150: $auto$alumacc.cc:485:replace_alu$531
  creating $alu cell for $flatten\mchip.\livecheck.\ledcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$66: $auto$alumacc.cc:485:replace_alu$542
  creating $alu cell for $flatten\mchip.\vgad.\v0.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75: $auto$alumacc.cc:485:replace_alu$545
  creating $alu cell for $flatten\mchip.\vgad.\v0.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75: $auto$alumacc.cc:485:replace_alu$548
  creating $alu cell for $flatten\mchip.\vgad.\v1.\hcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75: $auto$alumacc.cc:485:replace_alu$551
  creating $alu cell for $flatten\mchip.\vgad.\v1.\vcounter.$add$d22_wnace_vga_resolution/src/chip.sv:503$75: $auto$alumacc.cc:485:replace_alu$554
  created 39 $alu and 0 $macc cells.

3.14. Executing SHARE pass (SAT-based resource sharing).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

3.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.15.6. Executing OPT_DFF pass (perform DFF optimizations).

3.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 73 unused wires.
<suppressed ~1 debug messages>

3.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.15.9. Rerunning OPT passes. (Maybe there is more to do..)

3.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.15.13. Executing OPT_DFF pass (perform DFF optimizations).

3.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.15.16. Finished OPT passes. (There is nothing left to do.)

3.16. Executing MEMORY pass.

3.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~14 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

3.18.3. Executing OPT_DFF pass (perform DFF optimizations).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 10 unused cells and 48 unused wires.
<suppressed ~11 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g0.$ternary$d22_wnace_vga_resolution/src/chip.sv:253$20:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_RED_640
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_RED_640 [0]
      New connections: \mchip.vgad.VGA_RED_640 [7:1] = { \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] \mchip.vgad.VGA_RED_640 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g0.$ternary$d22_wnace_vga_resolution/src/chip.sv:254$24:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_GREEN_640
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_GREEN_640 [0]
      New connections: \mchip.vgad.VGA_GREEN_640 [7:1] = { \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] \mchip.vgad.VGA_GREEN_640 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g0.$ternary$d22_wnace_vga_resolution/src/chip.sv:255$28:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_BLUE_640
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_BLUE_640 [0]
      New connections: \mchip.vgad.VGA_BLUE_640 [7:1] = { \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] \mchip.vgad.VGA_BLUE_640 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g1.$ternary$d22_wnace_vga_resolution/src/chip.sv:402$46:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_RED_800
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_RED_800 [0]
      New connections: \mchip.vgad.VGA_RED_800 [7:1] = { \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] \mchip.vgad.VGA_RED_800 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g1.$ternary$d22_wnace_vga_resolution/src/chip.sv:403$50:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_GREEN_800
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_GREEN_800 [0]
      New connections: \mchip.vgad.VGA_GREEN_800 [7:1] = { \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] \mchip.vgad.VGA_GREEN_800 [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.\g1.$ternary$d22_wnace_vga_resolution/src/chip.sv:404$54:
      Old ports: A=8'00000000, B=8'11111111, Y=\mchip.vgad.VGA_BLUE_800
      New ports: A=1'0, B=1'1, Y=\mchip.vgad.VGA_BLUE_800 [0]
      New connections: \mchip.vgad.VGA_BLUE_800 [7:1] = { \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] \mchip.vgad.VGA_BLUE_800 [0] }
  Optimizing cells in module \toplevel_chip.
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.$procmux$185:
      Old ports: A=\mchip.vgad.VGA_BLUE_800 [7:5], B=\mchip.vgad.VGA_BLUE_640 [7:5], Y=\mchip.vgad.VGA_BLUE
      New ports: A=\mchip.vgad.VGA_BLUE_800 [0], B=\mchip.vgad.VGA_BLUE_640 [0], Y=\mchip.vgad.VGA_BLUE [0]
      New connections: \mchip.vgad.VGA_BLUE [2:1] = { \mchip.vgad.VGA_BLUE [0] \mchip.vgad.VGA_BLUE [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.$procmux$188:
      Old ports: A=\mchip.vgad.VGA_GREEN_800 [7:5], B=\mchip.vgad.VGA_GREEN_640 [7:5], Y=\mchip.vgad.VGA_GREEN
      New ports: A=\mchip.vgad.VGA_GREEN_800 [0], B=\mchip.vgad.VGA_GREEN_640 [0], Y=\mchip.vgad.VGA_GREEN [0]
      New connections: \mchip.vgad.VGA_GREEN [2:1] = { \mchip.vgad.VGA_GREEN [0] \mchip.vgad.VGA_GREEN [0] }
    Consolidated identical input bits for $mux cell $flatten\mchip.\vgad.$procmux$191:
      Old ports: A=\mchip.vgad.VGA_RED_800 [7:5], B=\mchip.vgad.VGA_RED_640 [7:5], Y=\mchip.vgad.VGA_RED
      New ports: A=\mchip.vgad.VGA_RED_800 [0], B=\mchip.vgad.VGA_RED_640 [0], Y=\mchip.vgad.VGA_RED [0]
      New connections: \mchip.vgad.VGA_RED [2:1] = { \mchip.vgad.VGA_RED [0] \mchip.vgad.VGA_RED [0] }
  Optimizing cells in module \toplevel_chip.
Performed a total of 9 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.20.6. Executing OPT_SHARE pass.

3.20.7. Executing OPT_DFF pass (perform DFF optimizations).

3.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~6 debug messages>

3.20.10. Rerunning OPT passes. (Maybe there is more to do..)

3.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.20.14. Executing OPT_SHARE pass.

3.20.15. Executing OPT_DFF pass (perform DFF optimizations).

3.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.20.18. Rerunning OPT passes. (Maybe there is more to do..)

3.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

3.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

3.20.22. Executing OPT_SHARE pass.

3.20.23. Executing OPT_DFF pass (perform DFF optimizations).

3.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

3.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

3.20.26. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_90_alu for cells of type $alu.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using template $paramod$78648aff6d035ceca1e51be5292d8e9748cdc2be\_90_alu for cells of type $alu.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_90_alu for cells of type $alu.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$2d591d76303cd5065d50f216288bb81e81f2927d\_90_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod$ea139abf5d9f33c5a8f110be2ae0a1d01adc5fd6\_90_alu for cells of type $alu.
Using template $paramod$8ffc13f158d9c4b92f6c17114e5b147ae5ead21a\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~3012 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~1815 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~2064 debug messages>
Removed a total of 688 cells.

3.22.3. Executing OPT_DFF pass (perform DFF optimizations).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 411 unused cells and 1945 unused wires.
<suppressed ~412 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Extracted 723 gates and 792 wires to a netlist network with 69 inputs and 78 outputs.

3.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        5
ABC RESULTS:               NOT cells:       15
ABC RESULTS:                OR cells:      131
ABC RESULTS:              NAND cells:       45
ABC RESULTS:             ORNOT cells:       40
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               NOR cells:       32
ABC RESULTS:            ANDNOT cells:      191
ABC RESULTS:               AND cells:       54
ABC RESULTS:               XOR cells:       60
ABC RESULTS:        internal signals:      645
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       78
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~25 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

3.24.3. Executing OPT_DFF pass (perform DFF optimizations).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 3 unused cells and 821 unused wires.
<suppressed ~335 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

3.25.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

3.26. Printing statistics.

=== toplevel_chip ===

   Number of wires:                970
   Number of wire bits:           4848
   Number of public wires:         476
   Number of public wire bits:    4230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                628
     $_ANDNOT_                     191
     $_AND_                         49
     $_DFF_PP0_                      1
     $_DFF_P_                       27
     $_MUX_                          5
     $_NAND_                        42
     $_NOR_                         31
     $_NOT_                         12
     $_ORNOT_                       40
     $_OR_                         128
     $_SDFFE_PP0P_                  20
     $_SDFF_PP0_                    20
     $_XNOR_                         2
     $_XOR_                         60

3.27. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

4. Executing SETUNDEF pass (replace undef values with defined constants).

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing ASYNC2SYNC pass.
Replacing toplevel_chip.$auto$ff.cc:266:slice$1283 ($_DFF_PP0_): ARST=\io_in [13], D=1'1, Q=\mchip.vgad.v0.state [0]

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

7.1.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.5. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.6.6. Executing OPT_DFF pass (perform DFF optimizations).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.6.9. Finished OPT passes. (There is nothing left to do.)

7.7. Executing FSM pass (extract and optimize FSM).

7.7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.8. Executing OPT pass (performing simple optimizations).

7.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

7.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.8.6. Executing OPT_DFF pass (perform DFF optimizations).

7.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.8.9. Finished OPT passes. (There is nothing left to do.)

7.9. Executing WREDUCE pass (reducing word size of cells).

7.10. Executing PEEPOPT pass (run peephole optimizers).

7.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module toplevel_chip:
  created 0 $alu and 0 $macc cells.

7.13. Executing SHARE pass (SAT-based resource sharing).

7.14. Executing OPT pass (performing simple optimizations).

7.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

7.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.14.6. Executing OPT_DFF pass (perform DFF optimizations).

7.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.14.9. Finished OPT passes. (There is nothing left to do.)

7.15. Executing MEMORY pass.

7.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.17. Executing OPT pass (performing simple optimizations).

7.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.17.3. Executing OPT_DFF pass (perform DFF optimizations).

7.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.17.5. Finished fast OPT passes.

7.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \toplevel_chip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \toplevel_chip.
Performed a total of 0 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.19.6. Executing OPT_SHARE pass.

7.19.7. Executing OPT_DFF pass (perform DFF optimizations).

7.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.19.10. Finished OPT passes. (There is nothing left to do.)

7.20. Executing TECHMAP pass (map to technology primitives).

7.20.1. Executing Verilog-2005 frontend: /Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/anish/workspace/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
Removed a total of 0 cells.

7.21.3. Executing OPT_DFF pass (perform DFF optimizations).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..

7.21.5. Finished fast OPT passes.

7.22. Executing ABC pass (technology mapping using ABC).

7.22.1. Extracting gate netlist of module `\toplevel_chip' to `<abc-temp-dir>/input.blif'..
Extracted 561 gates and 632 wires to a netlist network with 70 inputs and 78 outputs.

7.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        5
ABC RESULTS:               NOT cells:       12
ABC RESULTS:             ORNOT cells:       34
ABC RESULTS:                OR cells:      132
ABC RESULTS:              NAND cells:       43
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               NOR cells:       18
ABC RESULTS:            ANDNOT cells:      195
ABC RESULTS:               AND cells:       44
ABC RESULTS:               XOR cells:       61
ABC RESULTS:        internal signals:      484
ABC RESULTS:           input signals:       70
ABC RESULTS:          output signals:       78
Removing temp directory.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module toplevel_chip.
<suppressed ~5 debug messages>

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\toplevel_chip'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

7.23.3. Executing OPT_DFF pass (perform DFF optimizations).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \toplevel_chip..
Removed 1 unused cells and 634 unused wires.
<suppressed ~2 debug messages>

7.23.5. Finished fast OPT passes.

7.24. Executing HIERARCHY pass (managing design hierarchy).

7.24.1. Analyzing design hierarchy..
Top module:  \toplevel_chip

7.24.2. Analyzing design hierarchy..
Top module:  \toplevel_chip
Removed 0 unused modules.

7.25. Printing statistics.

=== toplevel_chip ===

   Number of wires:                952
   Number of wire bits:           4830
   Number of public wires:         476
   Number of public wire bits:    4230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                609
     $_ANDNOT_                     195
     $_AND_                         44
     $_DFF_P_                       27
     $_MUX_                          5
     $_NAND_                        43
     $_NOR_                         18
     $_NOT_                         11
     $_ORNOT_                       33
     $_OR_                         130
     $_SDFFE_PP0P_                  20
     $_SDFF_PP0_                    21
     $_XNOR_                         1
     $_XOR_                         61

7.26. Executing CHECK pass (checking for obvious problems).
Checking module toplevel_chip...
Found and reported 0 problems.
Renaming module \toplevel_chip to \d22_wnace_vga_resolution.

8. Executing Verilog backend.

8.1. Executing BMUXMAP pass.

8.2. Executing DEMUXMAP pass.
Dumping module `\d22_wnace_vga_resolution'.

9. Executing CHECK pass (checking for obvious problems).
Checking module d22_wnace_vga_resolution...
Found and reported 0 problems.

10. Printing statistics.

=== d22_wnace_vga_resolution ===

   Number of wires:                952
   Number of wire bits:           4830
   Number of public wires:         476
   Number of public wire bits:    4230
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                609
     $_ANDNOT_                     195
     $_AND_                         44
     $_DFF_P_                       27
     $_MUX_                          5
     $_NAND_                        43
     $_NOR_                         18
     $_NOT_                         11
     $_ORNOT_                       33
     $_OR_                         130
     $_SDFFE_PP0P_                  20
     $_SDFF_PP0_                    21
     $_XNOR_                         1
     $_XOR_                         61

End of script. Logfile hash: 4580f6bd9d, CPU: user 0.69s system 0.03s
Yosys 0.36+3 (git sha1 a53032104, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 18% 39x opt_clean (0 sec), 18% 47x opt_expr (0 sec), ...

